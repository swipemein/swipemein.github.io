{"version":3,"sources":["Utils.js","services/LoginService.js","components/Nav.js","views/Home.js","views/Profile.js","components/Swipe.js","components/Constants.js","views/Dashboard.js","views/SwipeView.js","views/AddSwipe.js","views/404.js","App.js","serviceWorker.js","index.js"],"names":["getTimeString","swipeTime","datetime","Date","toLocaleDateString","toLocaleTimeString","sortBySwipeTime","swipeDatas","sort","a","b","LoginService","url","this","clientID","redirectURI","scope","forEach","param","label","value","code","console","log","fetch","getURL","then","response","json","data","xhr","XMLHttpRequest","onreadystatechange","receiveToken","open","setRequestHeader","responseType","body","send","xhrResponse","readyState","DONE","getUserInfo","resp","localStorage","setItem","process","REACT_APP_SUB_ID","window","location","reload","removeItem","getItem","to","exact","SwipeNav","props","state","loggedIn","navbarItems","Link","href","onClick","logOut","getRedirectUrl","Brand","Collapse","className","Component","Home","includes","split","login","title","text","InfoCard","Body","Title","Text","Profile","student","ownedSwipes","claimedSwipes","isLoggedIn","redirectLogin","Group","Label","Control","placeholder","name","type","email","id","Swipe","swipe","Subtitle","diningHallStrings","Dashboard","swipes","event","preventDefault","form","key","document","getElementById","checked","push","getSwipes","JSON","stringify","Object","values","map","swipeData","setState","strings","checks","s","Check","defaultChecked","diningHallCheckboxes","makeCheckboxes","Header","Toggle","as","rb","eventKey","onSubmit","e","getFilteredResults","length","SwipeView","hashes","hash","swipeID","entries","ownedBy","firstName","active","AddSwipe","disabled","parse","claimedBy","method","status","alert","diningHalls","hall","submitForm","Row","WebpageNotFound","App","basename","path","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1155fb15.chunk.js","sourcesContent":["export const getTimeString = swipeTime => {\r\n  const datetime = new Date(swipeTime*1000);\r\n  return datetime.toLocaleDateString() + \", \" + datetime.toLocaleTimeString()\r\n}\r\n\r\nexport const getURL = () => {\r\n  // return \"http://localhost:5000\";\r\n  return \"https://swipemein.herokuapp.com\";\r\n}\r\n\r\nexport const sortBySwipeTime = swipeDatas => {\r\n  return swipeDatas.sort((a, b) => a.swipeTime - b.swipeTime);\r\n}","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { getURL } from '../Utils';\r\n\r\nclass LoginService {\r\n  static clientID = \"1f9c2c3c-b83e-430d-9420-d9181c7a7904\";\r\n  static responseType = \"code\";\r\n  static scope = \"openid profile email\";\r\n  static redirectURI = \"https://swipemein.github.io/\";\r\n  // static redirectURI = getURL() + \"/token\";\r\n\r\n  // Get url to redirect to OIDC to authenticate\r\n  static getRedirectUrl() {\r\n    let url = \"https://oidc.mit.edu/authorize?response_type=code\";\r\n    \r\n    let params = [\r\n      [\"client_id\", this.clientID],\r\n      // [\"response_type\", this.responseType],\r\n      [\"redirect_uri\", this.redirectURI],\r\n      [\"scope\", this.scope],\r\n    ];\r\n\r\n    params.forEach(param => {\r\n      let label = param[0], value = param[1];\r\n      url += \"&\" + label + \"=\" + value;\r\n    });\r\n    return url;\r\n  }\r\n\r\n  // Log in with code returned from OIDC\r\n  static login(code) {\r\n    console.log(code);\r\n    fetch(getURL() + '/token?code=' + code).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(data => console.log(data));\r\n  }\r\n  \r\n  static requestToken(code) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = () => this.receiveToken(xhr);\r\n  \r\n    xhr.open(\"POST\", \"https://oidc.mit.edu/token\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.responseType = \"json\";\r\n  \r\n    let body = \"grant_type=authorization_code\";\r\n    body += \"&code=\" + code;\r\n    body += \"&redirect_uri=https://swipemein.github.io/\";\r\n    body += \"&client_id=8fbfe55e-51b6-40df-a8e2-0a38690e2a9f\";\r\n    body += \"&client_secret=D1vTFSOtY8zdbsiliGbDWf8tJCMtJ7IWPkLyROnp4yxhgpQWqeBRQWGRjj6NEFl_M4dt5k9dvgAA8k4v2poWxQ\";\r\n  \r\n    xhr.send(body);\r\n  }\r\n\r\n  static receiveToken(xhrResponse) {\r\n    if (xhrResponse.readyState === XMLHttpRequest.DONE) {\r\n      let xhr = new XMLHttpRequest();\r\n      xhr.onreadystatechange = () => this.getUserInfo(xhr);\r\n\r\n      xhr.open(\"GET\", \"https://oidc.mit.edu/userinfo\");\r\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + xhrResponse.response[\"access_token\"]);\r\n      xhr.responseType = \"json\";\r\n\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  static getUserInfo(xhrResponse) {\r\n    if (xhrResponse.readyState === XMLHttpRequest.DONE) {\r\n      let resp = xhrResponse.response;\r\n      // let db = fb.firestore();\r\n      // let userDocRef = db.collection('users').doc(resp['sub']);\r\n      localStorage.setItem(process.env.REACT_APP_SUB_ID, resp['sub']);\r\n\r\n      // userDocRef.get().then((doc) => {\r\n      //   if (!doc.exists) {\r\n      //     console.log(resp);\r\n      //     console.log('does not exist');\r\n      //     doc.set({\r\n      //       email: resp['email'],\r\n      //       name: resp['name'],\r\n      //       anon: false,\r\n      //       reputation: 1\r\n      //       // swipes listed (empty)\r\n      //       // swipes claimed (empty)\r\n      //     });\r\n      //   }\r\n      // });\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  static logOut() {\r\n    localStorage.removeItem(process.env.REACT_APP_SUB_ID);\r\n  }\r\n\r\n  static isLoggedIn() {\r\n    return localStorage.getItem(process.env.REACT_APP_SUB_ID) !== null;\r\n  }\r\n\r\n  static redirectLogin() {\r\n    return <Redirect to='/login' exact={true} />\r\n  }\r\n}\r\n\r\nexport default LoginService;","import React, { Component } from 'react';\r\n\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport '../site.css';\r\n\r\nexport default class SwipeNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loggedIn: !(localStorage.getItem(process.env.REACT_APP_SUB_ID) === null)\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let navbarItems;\r\n    if (!this.state.loggedIn) {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href={LoginService.getRedirectUrl()}>Login</rb.Nav.Link>\r\n        </>\r\n      );\r\n    } else {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href='/#/dashboard'>Dashboard</rb.Nav.Link>\r\n          <rb.Nav.Link href='/#/profile'>Profile</rb.Nav.Link>\r\n          <rb.Nav.Link href='/' onClick={() => LoginService.logOut()}>Logout</rb.Nav.Link>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <rb.Navbar>\r\n        <rb.Navbar.Brand href='/'>SwipeMeIn</rb.Navbar.Brand>\r\n        <rb.Navbar.Collapse>\r\n          <rb.Nav className='ml-auto'>\r\n            {navbarItems}\r\n          </rb.Nav>\r\n        </rb.Navbar.Collapse>\r\n      </rb.Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Login info\r\n    let url = window.location.href;\r\n    if (url.includes(\"code\") && localStorage.getItem(process.env.REACT_APP_SUB_ID) === null) {\r\n      let suffix = url.split(\"?\")[1];\r\n      let assignment = suffix.split(\"#\")[0];\r\n      let code = assignment.split(\"=\")[1];\r\n      LoginService.login(code);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container-fluid homephotos'>\r\n\r\n          <div className='hometitle container'>\r\n            <h2>SwipeMeIn</h2>\r\n          </div>\r\n          <div className='homeinfo container-fluid'>\r\n            <div className='col-xs-4 homedescription'>\r\n              <div className='container'>\r\n                <h3>What is SwipeMeIn?</h3>\r\n\r\n              </div>\r\n              <div className='container'>\r\n                <p>We’ve all been there: it’s 7 PM, you’re on campus, and you’re hungry. You have two options: spend an absurd amount of money for on-campus dining or ask a friend to lend you a swipe.</p>\r\n                <p>With meal plan minimums increasing and limited swipe donation programs to take advantage of, countless students end each year with extra swipes that are wasted. SwipeMeIn is a platform for those with extra swipes to make the most of their surplus and the hungry to score a free meal.</p>\r\n\r\n              </div>\r\n              {/* <div className='homedirections container'>\r\n                <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n              </div> */}\r\n              <div className='homedirections row container'>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InfoCard extends Component {\r\n  render() {\r\n    return (\r\n      // <div className='col-xs-1'>\r\n      <rb.Card>\r\n        <rb.Card.Body>\r\n          <rb.Card.Title>{this.props.title}</rb.Card.Title>\r\n          <rb.Card.Text>{this.props.text}</rb.Card.Text>\r\n        </rb.Card.Body>\r\n      </rb.Card>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\n// import Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Profile extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      student: {},\r\n      ownedSwipes: null,\r\n      claimedSwipes: null,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n\r\n    let student = this.state.student;\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className=\"pagetitle\">Profile</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <div className='container'>\r\n            <h5>Info</h5>\r\n            <div className='container'>\r\n              <rb.Form>\r\n                <rb.Form.Group>\r\n                  <rb.Form.Label>Name:</rb.Form.Label>\r\n                  <rb.Form.Control placeholder={student.name} />\r\n                </rb.Form.Group>\r\n                <rb.Form.Group>\r\n                  <rb.Form.Label>Email:</rb.Form.Label>\r\n                  <rb.Form.Control type=\"email\" placeholder={student.email} />\r\n                </rb.Form.Group>\r\n                {/* <rb.Form.Group>\r\n                  <rb.Form.Label>Anonymity:</rb.Form.Label>\r\n                  <rb.Form.Check type='switch' label='Anonymous - swipers will not see your name when you claim or advertise a swipe.'\r\n                    defaultValue={student.anon} />\r\n                </rb.Form.Group> */}\r\n              </rb.Form>\r\n            </div>\r\n            <div className='container row' id='profilefooter'>\r\n\r\n              <div className='col-xs-4'>\r\n                <h5>Your swipes</h5>\r\n                <div className='container'>\r\n                  {this.state.ownedSwipes ?? 'None'}\r\n                </div>\r\n              </div>\r\n\r\n              <div className='col-xs-4'>\r\n                <h5>Swipes you've claimed</h5>\r\n                <div className='container'>\r\n                  {this.state.claimedSwipes ?? 'None'}\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getTimeString } from '../Utils.js';\r\n\r\nexport default class Swipe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: this.props.swipe,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let swipe = this.state.swipe\r\n    return (\r\n      <div className='swipecard container'>\r\n        <div className='col-xs-4'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n              <rb.Card.Title>{swipe.location}</rb.Card.Title>\r\n              <rb.Card.Subtitle>{getTimeString(swipe.swipeTime)}</rb.Card.Subtitle>\r\n              <rb.Card.Text>\r\n\r\n              </rb.Card.Text>\r\n              <rb.Button>Claim Swipe</rb.Button>\r\n              <rb.Card.Link href={'/#/swipeinfo/' + swipe.id}>Info</rb.Card.Link>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export const diningHallStrings = ['Maseeh', 'McCormick', 'Baker', 'Next', 'Simmons', 'New Vassar'];\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { getURL, sortBySwipeTime } from '../Utils.js';\r\n\r\nexport default class Dashboard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tswipes: [],\r\n\t\t};\r\n\t}\r\n\r\n\tgetFilteredResults(event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet form = {\r\n\t\t\t'locations': []\r\n\t\t};\r\n\t\tdiningHallStrings.forEach(key => {\r\n\t\t\tif (document.getElementById(key).checked) {\r\n\t\t\t\tform['locations'].push(key);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.getSwipes(form);\r\n\t}\r\n\r\n\tgetSwipes(form={}) {\r\n\t\tfetch(getURL() + '/getswipes?filters=' + JSON.stringify(form)).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(data => {\r\n\t\t\tlet swipeDatas = sortBySwipeTime(Object.values(data));\r\n\t\t\tlet swipes = swipeDatas.map(\r\n\t\t\t\tswipeData => <Swipe swipe={swipeData} key={swipeData.id} />\r\n\t\t\t);\r\n\t\t\tthis.setState({\r\n\t\t\t\tswipes: swipes,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tmakeCheckboxes(strings) {\r\n\t\tlet checks = [];\r\n\t\tstrings.forEach(s => {\r\n\t\t\tchecks.push(\r\n\t\t\t\t<rb.Form.Check type='checkbox' label={s} key={s} id={s} name={s} defaultChecked />\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn checks;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getSwipes();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!LoginService.isLoggedIn()) {\r\n\t\t\treturn LoginService.redirectLogin();\r\n\t\t}\r\n\t\tlet swipes = this.state.swipes;\r\n\t\tlet diningHallCheckboxes = this.makeCheckboxes(diningHallStrings);\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<SwipeNav />\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='pagetitle'>Swipe Dashboard</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<div className='row container' id='middashboard'>\r\n\t\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t\t<rb.Accordion>\r\n\t\t\t\t\t\t\t\t<rb.Card>\r\n\t\t\t\t\t\t\t\t\t<rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\tFilters\r\n\t\t\t\t\t\t\t\t\t\t</rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t</rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t<rb.Accordion.Collapse eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t<rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<rb.Form onSubmit={(e) => this.getFilteredResults(e)} id='filterform' name='filterform'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h2>Dining Halls:</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{diningHallCheckboxes}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle type='submit' as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tApply Filters\r\n                        </rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t</rb.Form>\r\n\t\t\t\t\t\t\t\t\t\t</rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t</rb.Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</rb.Card>\r\n\t\t\t\t\t\t\t</rb.Accordion>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='col' id='addswipebuttoncol'>\r\n\t\t\t\t\t\t\t<rb.Button className='btn-block' href='/#/addswipe' id='addswipebutton'>Add Swipe</rb.Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t{swipes.length === 0 ? 'loading' : swipes}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getTimeString, getURL } from '../Utils.js';\r\n\r\nexport default class SwipeView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hashes = window.location.hash.split(\"/\");\r\n    let swipeID = hashes[hashes.length - 1];\r\n\r\n    fetch(getURL() + '/getswipe?id=' + swipeID).then(\r\n      response => response.json()\r\n    ).then(\r\n      data => {\r\n        this.setState({\r\n          swipe: data\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let swipe = this.state.swipe;\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <div className='col-xs-4'>\r\n            {Object.entries(swipe).length === 0 ? (\"loading\") : \r\n            (\r\n              <rb.Card>\r\n                <rb.Card.Body>\r\n                  <rb.Card.Title>{swipe.location}</rb.Card.Title>\r\n                  <rb.Card.Subtitle>{getTimeString(swipe.swipeTime)}</rb.Card.Subtitle>\r\n                  <ul>\r\n                    <li>\r\n                      Owner: {swipe.ownedBy.firstName}\r\n                    </li>\r\n                    <li>\r\n                      Status: {swipe.active ? \"Active\" : \"Inactive\"}\r\n                    </li>\r\n                  </ul>\r\n                  <rb.Button>Claim Swipe</rb.Button>\r\n                </rb.Card.Body>\r\n              </rb.Card>\r\n            )\r\n            }\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getURL } from '../Utils.js';\r\n\r\nexport default class AddSwipe extends Component {\r\n\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n    document.getElementById('submitbutton').disabled = true;\r\n\r\n    let form = {};\r\n    ['swipedininghall', 'swipedate', 'swipetime'].forEach(key => {\r\n      form[key] = document.getElementById(key).value;\r\n    });\r\n    if (form['swipedate'] === \"\") {\r\n      alert(\"Please enter the date of your swipe.\");\r\n      return;\r\n    }\r\n    if (form['swipetime'] === \"\") {\r\n      alert(\"Please enter the time of your swipe.\");\r\n      return;\r\n    }\r\n    let swipeTime = Date.parse(form['swipedate'] + \"T\" + form['swipetime']);\r\n\r\n    let swipe = {\r\n      active: true,\r\n      claimedBy: null,\r\n      location: form['swipedininghall'],\r\n      ownedBy: null,\r\n      swipeTime: swipeTime,\r\n    }\r\n\r\n    fetch(getURL() + '/addswipe?data=' + JSON.stringify(swipe), {method: 'POST'}).then(response => {\r\n      console.log(response.status);\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't add swipe.\");\r\n      } else if (response.status === 200) {\r\n        alert(\"Swipe added successfully!\");\r\n      } else {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      document.getElementById('submitbutton').disabled = false;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let diningHalls = diningHallStrings.map(hall => <option key={hall}>{hall}</option>);\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Add Swipe</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n\r\n              <rb.Form onSubmit={this.submitForm} id='swipeform'>\r\n                <rb.Form.Group>\r\n                  <rb.Form.Label>Location</rb.Form.Label>\r\n                  <rb.Form.Control as='select' id='swipedininghall'>\r\n                    {diningHalls}\r\n                  </rb.Form.Control>\r\n                </rb.Form.Group>\r\n                <rb.Form.Row>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Day</rb.Form.Label>\r\n                      <rb.Form.Control type='date' id='swipedate' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Time</rb.Form.Label>\r\n                      <rb.Form.Control type='time' id='swipetime' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                </rb.Form.Row>\r\n                <rb.Button type='submit' id='submitbutton'>Submit</rb.Button>\r\n              </rb.Form>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport SwipeNav from '../components/Nav.js';\r\n// import * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class WebpageNotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Error 404: Page not found</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\n\r\nimport Home from './views/Home';\r\nimport Profile from './views/Profile';\r\nimport Dashboard from './views/Dashboard';\r\nimport SwipeView from './views/SwipeView';\r\nimport AddSwipe from './views/AddSwipe';\r\nimport WebpageNotFound from './views/404.js';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route exact={true} path='/' render={() => (\r\n          <Home />\r\n        )} />\r\n        <Route exact={true} path='/profile' render={() => (\r\n          <Profile />\r\n        )} />\r\n        <Route exact={true} path='/dashboard' render={() => (\r\n          <Dashboard />\r\n        )} />\r\n        <Route exact={true} path='/swipeinfo/:id' render={() => (\r\n          <SwipeView />\r\n        )} />\r\n        <Route exact={true} path='/addswipe' render={() => (\r\n          <AddSwipe />\r\n        )} />\r\n        <Route path=\"*\" exact={true} render={() => (\r\n          <WebpageNotFound />\r\n        )} />\r\n      </Switch>\r\n    </HashRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}