{"version":3,"sources":["Utils.js","services/LoginService.js","components/Nav.js","views/Home.js","views/Profile.js","components/Swipe.js","components/Constants.js","views/Dashboard.js","views/SwipeView.js","views/AddSwipe.js","views/404.js","views/Login.js","App.js","serviceWorker.js","index.js"],"names":["getTimeString","swipeTime","datetime","Date","toLocaleDateString","toLocaleTimeString","sortBySwipeTime","swipeDatas","sort","a","b","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","LoginService","email","password","createUserWithEmailAndPassword","then","userCredential","token","_tokenResponse","idToken","storeToken","fetch","getURL","method","headers","getToken","catch","error","alert","signInWithEmailAndPassword","console","log","signOut","removeToken","undefined","localStorage","setItem","removeItem","getItem","to","exact","SwipeNav","navbarItems","isLoggedIn","Link","href","onClick","logOut","Brand","Collapse","className","Component","Home","props","url","window","location","includes","process","REACT_APP_SUB_ID","code","split","login","title","text","InfoCard","Body","Title","this","Text","Profile","state","name","socialPreference","passwordButtonText","profileButtonText","ownedSwipes","claimedSwipes","newName","document","getElementById","value","newSocialPreference","body","JSON","stringify","firstName","setState","passwordInput","newPassword","r","json","userData","Group","Label","Control","id","type","defaultValue","placeholder","disabled","updateProfile","changePassword","redirectLogin","Swipe","swipe","Subtitle","diningHallStrings","Dashboard","swipes","event","preventDefault","form","forEach","key","checked","push","getSwipes","response","data","Object","values","map","swipeData","strings","checks","s","Check","label","defaultChecked","diningHallCheckboxes","makeCheckboxes","Header","Toggle","as","rb","eventKey","onSubmit","e","getFilteredResults","length","SwipeView","hashes","hash","swipeID","entries","ownedBy","active","AddSwipe","parse","claimedBy","status","diningHalls","hall","submitForm","Row","WebpageNotFound","Login","pw","logIn","history","createProfile","submitLogin","submitSignup","withRouter","App","basename","path","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5de45b36.chunk.js","sourcesContent":["export const getTimeString = swipeTime => {\r\n  const datetime = new Date(swipeTime*1000);\r\n  return datetime.toLocaleDateString() + \", \" + datetime.toLocaleTimeString()\r\n}\r\n\r\nexport const getURL = () => {\r\n  // return \"http://localhost:5000\";\r\n  return \"https://swipemein.herokuapp.com\";\r\n}\r\n\r\nexport const sortBySwipeTime = swipeDatas => {\r\n  return swipeDatas.sort((a, b) => a.swipeTime - b.swipeTime);\r\n}","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { getURL } from '../Utils';\r\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDAVAezS1NPeLwvjW_Ldx3NYbSsWzdTGPg\",\r\n  authDomain: \"swipemein-storage.firebaseapp.com\",\r\n  projectId: \"swipemein-storage\",\r\n  storageBucket: \"swipemein-storage.appspot.com\",\r\n  messagingSenderId: \"810938213396\",\r\n  appId: \"1:810938213396:web:44f1aff1b0f0b3a3553301\",\r\n  measurementId: \"G-E7QJK7RDFJ\"\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\nconst auth = getAuth();\r\n\r\nclass LoginService {\r\n\r\n  static async createProfile(email, password) {\r\n    await createUserWithEmailAndPassword(auth, email, password)\r\n      .then((userCredential) => {\r\n        const token = userCredential._tokenResponse.idToken;\r\n        LoginService.storeToken(token);\r\n        fetch(\r\n          getURL() + '/addUser',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': LoginService.getToken()\r\n            },\r\n          }\r\n        ).catch(error => {\r\n          alert('Error inserting into database.');\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        alert('Error creating user.');\r\n      });\r\n  }\r\n\r\n  static async logIn(email, password) {\r\n    await signInWithEmailAndPassword(auth, email, password)\r\n    .then((userCredential) => {\r\n      const token = userCredential._tokenResponse.idToken;\r\n      LoginService.storeToken(token);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  \r\n  static logOut() {\r\n    signOut(auth).then(() => {\r\n      LoginService.removeToken();\r\n    }).catch(error => {\r\n      console.log('error signing out');\r\n    });\r\n  }\r\n\r\n  static isLoggedIn() {\r\n    return LoginService.getToken() !== undefined && LoginService.getToken() !== null;\r\n  }\r\n\r\n  static storeToken(token) {\r\n    localStorage.setItem('idToken', token);\r\n  }\r\n\r\n  static removeToken() {\r\n    localStorage.removeItem('idToken');\r\n  }\r\n\r\n  static getToken() {\r\n    return localStorage.getItem('idToken');\r\n  }\r\n\r\n  static redirectLogin() {\r\n    return <Redirect to='/login' exact={true} />\r\n  }\r\n}\r\n\r\nexport default LoginService;","import React, { Component } from 'react';\r\n\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport '../site.css';\r\n\r\nexport default class SwipeNav extends Component {\r\n  render() {\r\n    let navbarItems;\r\n    if (!LoginService.isLoggedIn()) {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href='/#/login'>Login</rb.Nav.Link>\r\n        </>\r\n      );\r\n    } else {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href='/#/dashboard'>Dashboard</rb.Nav.Link>\r\n          <rb.Nav.Link href='/#/profile'>Profile</rb.Nav.Link>\r\n          <rb.Nav.Link href='/' onClick={() => LoginService.logOut()}>Logout</rb.Nav.Link>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <rb.Navbar>\r\n        <rb.Navbar.Brand href='/'>SwipeMeIn</rb.Navbar.Brand>\r\n        <rb.Navbar.Collapse>\r\n          <rb.Nav className='ml-auto'>\r\n            {navbarItems}\r\n          </rb.Nav>\r\n        </rb.Navbar.Collapse>\r\n      </rb.Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Login info\r\n    let url = window.location.href;\r\n    if (url.includes(\"code\") && localStorage.getItem(process.env.REACT_APP_SUB_ID) === null) {\r\n      let suffix = url.split(\"?\")[1];\r\n      let assignment = suffix.split(\"#\")[0];\r\n      let code = assignment.split(\"=\")[1];\r\n      LoginService.login(code);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container-fluid homephotos'>\r\n\r\n          <div className='hometitle container'>\r\n            <h2>SwipeMeIn</h2>\r\n          </div>\r\n          <div className='homeinfo container-fluid'>\r\n            <div className='col-xs-4 homedescription'>\r\n              <div className='container'>\r\n                <h3>What is SwipeMeIn?</h3>\r\n\r\n              </div>\r\n              <div className='container'>\r\n                <p>We’ve all been there: it’s 7 PM, you’re on campus, and you’re hungry. You have two options: spend an absurd amount of money for on-campus dining or ask a friend to lend you a swipe.</p>\r\n                <p>With meal plan minimums increasing and limited swipe donation programs to take advantage of, countless students end each year with extra swipes that are wasted. SwipeMeIn is a platform for those with extra swipes to make the most of their surplus and the hungry to score a free meal.</p>\r\n\r\n              </div>\r\n              {/* <div className='homedirections container'>\r\n                <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n              </div> */}\r\n              <div className='homedirections row container'>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InfoCard extends Component {\r\n  render() {\r\n    return (\r\n      // <div className='col-xs-1'>\r\n      <rb.Card>\r\n        <rb.Card.Body>\r\n          <rb.Card.Title>{this.props.title}</rb.Card.Title>\r\n          <rb.Card.Text>{this.props.text}</rb.Card.Text>\r\n        </rb.Card.Body>\r\n      </rb.Card>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\n// import Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport { getURL } from '../Utils.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Profile extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      socialPreference: '',\r\n      passwordButtonText: 'Submit New Password',\r\n      profileButtonText: 'Submit Profile Changes',\r\n      ownedSwipes: null,\r\n      claimedSwipes: null,\r\n    }\r\n  }\r\n\r\n  async updateProfile() {\r\n    const newName = document.getElementById('nameinput').value;\r\n    const newSocialPreference = document.getElementById('socialpreferenceinput').value;\r\n    fetch(\r\n      getURL() + '/updateUser',\r\n      {        \r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t},\r\n        body: JSON.stringify({\r\n          firstName: newName,\r\n          socialPreference: newSocialPreference,\r\n        })\r\n      }\r\n    ).then(() => {\r\n      this.setState({\r\n        profileButtonText: 'Profile Change Successful!'\r\n      })\r\n    }).catch(error => {\r\n      alert('Error changing profile.');\r\n    })\r\n  }\r\n\r\n  async changePassword() {\r\n    const passwordInput = document.getElementById('newpassword');\r\n    const newPassword = passwordInput.value;\r\n    fetch(\r\n      getURL() + '/changePassword',\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t},\r\n        body: JSON.stringify({\r\n          newPassword: newPassword,\r\n        })\r\n\t\t\t}\r\n    ).then(() => {\r\n      passwordInput.value = '';\r\n      this.setState({\r\n        passwordButtonText: 'Password Change Successful!'\r\n      })\r\n    }).catch(() => {\r\n      alert('Error changing password.');\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      getURL() + '/getUser',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': LoginService.getToken()\r\n        },\r\n      }\r\n    ).then(r => r.json()).then(r => {\r\n      const userData = r.userData;\r\n      this.setState({\r\n        name: userData.firstName,\r\n        email: userData.email,\r\n        socialPreference: userData.socialPreference,\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className=\"pagetitle\">Profile</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <div className='container'>\r\n            <h5>Info</h5>\r\n            <div className='container'>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Name:</rb.Form.Label>\r\n                <rb.Form.Control id='nameinput' type=\"text\" defaultValue={this.state.name} />\r\n              </rb.Form.Group>\r\n  \r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control type=\"email\" placeholder={this.state.email} disabled />\r\n              </rb.Form.Group>\r\n              \r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Social Preferences:</rb.Form.Label>\r\n                <rb.Form.Control id='socialpreferenceinput' type=\"text\" defaultValue={this.state.socialPreference} />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.updateProfile()}>{this.state.profileButtonText}</rb.Button>\r\n            </div>\r\n            <br/>\r\n            <h5>Change Password</h5>\r\n            <div className='container'>\r\n              <rb.Form.Group>\r\n                <rb.Form.Control id='newpassword' type='password' placeholder='New Password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.changePassword()}>{this.state.passwordButtonText}</rb.Button>\r\n            </div>\r\n            <br/>\r\n            <div className='container row' id='profilefooter'>\r\n\r\n              <div className='col-xs-4'>\r\n                <h5>Your swipes</h5>\r\n                <div className='container'>\r\n                  {this.state.ownedSwipes ?? 'None'}\r\n                </div>\r\n              </div>\r\n\r\n              <div className='col-xs-4'>\r\n                <h5>Swipes you've claimed</h5>\r\n                <div className='container'>\r\n                  {this.state.claimedSwipes ?? 'None'}\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getTimeString } from '../Utils.js';\r\n\r\nexport default class Swipe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: this.props.swipe,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let swipe = this.state.swipe\r\n    return (\r\n      <div className='swipecard container'>\r\n        <div className='col-xs-4'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n              <rb.Card.Title>{swipe.location}</rb.Card.Title>\r\n              <rb.Card.Subtitle>{getTimeString(swipe.swipeTime)}</rb.Card.Subtitle>\r\n              <rb.Card.Text>\r\n\r\n              </rb.Card.Text>\r\n              <rb.Button>Claim Swipe</rb.Button>\r\n              <rb.Card.Link href={'/#/swipeinfo/' + swipe.id}>Info</rb.Card.Link>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export const diningHallStrings = ['Maseeh', 'McCormick', 'Baker', 'Next', 'Simmons', 'New Vassar'];\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { getURL, sortBySwipeTime } from '../Utils.js';\r\n\r\nexport default class Dashboard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tswipes: [],\r\n\t\t};\r\n\t}\r\n\r\n\tgetFilteredResults(event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet form = {\r\n\t\t\t'locations': []\r\n\t\t};\r\n\t\tdiningHallStrings.forEach(key => {\r\n\t\t\tif (document.getElementById(key).checked) {\r\n\t\t\t\tform['locations'].push(key);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.getSwipes(form);\r\n\t}\r\n\r\n\tgetSwipes(form={}) {\r\n\t\tfetch(\r\n\t\t\tgetURL() + '/getswipes?filters=' + JSON.stringify(form),\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(data => {\r\n\t\t\tlet swipeDatas = sortBySwipeTime(Object.values(data));\r\n\t\t\tlet swipes = swipeDatas.map(\r\n\t\t\t\tswipeData => <Swipe swipe={swipeData} key={swipeData.id} />\r\n\t\t\t);\r\n\t\t\tthis.setState({\r\n\t\t\t\tswipes: swipes,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tmakeCheckboxes(strings) {\r\n\t\tlet checks = [];\r\n\t\tstrings.forEach(s => {\r\n\t\t\tchecks.push(\r\n\t\t\t\t<rb.Form.Check type='checkbox' label={s} key={s} id={s} name={s} defaultChecked />\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn checks;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getSwipes();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!LoginService.isLoggedIn()) {\r\n\t\t\treturn LoginService.redirectLogin();\r\n\t\t}\r\n\t\tlet swipes = this.state.swipes;\r\n\t\tlet diningHallCheckboxes = this.makeCheckboxes(diningHallStrings);\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<SwipeNav />\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='pagetitle'>Swipe Dashboard</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<div className='row container' id='middashboard'>\r\n\t\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t\t<rb.Accordion>\r\n\t\t\t\t\t\t\t\t<rb.Card>\r\n\t\t\t\t\t\t\t\t\t<rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\tFilters\r\n\t\t\t\t\t\t\t\t\t\t</rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t</rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t<rb.Accordion.Collapse eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t<rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<rb.Form onSubmit={(e) => this.getFilteredResults(e)} id='filterform' name='filterform'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h2>Dining Halls:</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{diningHallCheckboxes}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle type='submit' as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tApply Filters\r\n                        </rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t</rb.Form>\r\n\t\t\t\t\t\t\t\t\t\t</rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t</rb.Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</rb.Card>\r\n\t\t\t\t\t\t\t</rb.Accordion>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='col' id='addswipebuttoncol'>\r\n\t\t\t\t\t\t\t<rb.Button className='btn-block' href='/#/addswipe' id='addswipebutton'>Add Swipe</rb.Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t{swipes.length === 0 ? 'loading' : swipes}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getTimeString, getURL } from '../Utils.js';\r\n\r\nexport default class SwipeView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hashes = window.location.hash.split(\"/\");\r\n    let swipeID = hashes[hashes.length - 1];\r\n\r\n    fetch(\r\n      getURL() + '/getswipe?id=' + swipeID,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(\r\n      response => response.json()\r\n    ).then(\r\n      data => {\r\n        this.setState({\r\n          swipe: data\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let swipe = this.state.swipe;\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <div className='col-xs-4'>\r\n            {Object.entries(swipe).length === 0 ? (\"loading\") : \r\n            (\r\n              <rb.Card>\r\n                <rb.Card.Body>\r\n                  <rb.Card.Title>{swipe.location}</rb.Card.Title>\r\n                  <rb.Card.Subtitle>{getTimeString(swipe.swipeTime)}</rb.Card.Subtitle>\r\n                  <ul>\r\n                    <li>\r\n                      Owner: {swipe.ownedBy.firstName}\r\n                    </li>\r\n                    <li>\r\n                      Status: {swipe.active ? \"Active\" : \"Inactive\"}\r\n                    </li>\r\n                  </ul>\r\n                  <rb.Button>Claim Swipe</rb.Button>\r\n                </rb.Card.Body>\r\n              </rb.Card>\r\n            )\r\n            }\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getURL } from '../Utils.js';\r\n\r\nexport default class AddSwipe extends Component {\r\n\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n    document.getElementById('submitbutton').disabled = true;\r\n\r\n    let form = {};\r\n    ['swipedininghall', 'swipedate', 'swipetime'].forEach(key => {\r\n      form[key] = document.getElementById(key).value;\r\n    });\r\n    if (form['swipedate'] === \"\") {\r\n      alert(\"Please enter the date of your swipe.\");\r\n      return;\r\n    }\r\n    if (form['swipetime'] === \"\") {\r\n      alert(\"Please enter the time of your swipe.\");\r\n      return;\r\n    }\r\n    let swipeTime = Date.parse(form['swipedate'] + \"T\" + form['swipetime']);\r\n\r\n    let swipe = {\r\n      active: true,\r\n      claimedBy: null,\r\n      location: form['swipedininghall'],\r\n      ownedBy: null,\r\n      swipeTime: swipeTime,\r\n    }\r\n\r\n    fetch(\r\n      getURL() + '/addswipe?data=' + JSON.stringify(swipe),\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(response => {\r\n      console.log(response.status);\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't add swipe.\");\r\n      } else if (response.status === 200) {\r\n        alert(\"Swipe added successfully!\");\r\n      } else {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      document.getElementById('submitbutton').disabled = false;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let diningHalls = diningHallStrings.map(hall => <option key={hall}>{hall}</option>);\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Add Swipe</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n\r\n              <rb.Form onSubmit={this.submitForm} id='swipeform'>\r\n                <rb.Form.Group>\r\n                  <rb.Form.Label>Location</rb.Form.Label>\r\n                  <rb.Form.Control as='select' id='swipedininghall'>\r\n                    {diningHalls}\r\n                  </rb.Form.Control>\r\n                </rb.Form.Group>\r\n                <rb.Form.Row>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Day</rb.Form.Label>\r\n                      <rb.Form.Control type='date' id='swipedate' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Time</rb.Form.Label>\r\n                      <rb.Form.Control type='time' id='swipetime' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                </rb.Form.Row>\r\n                <rb.Button type='submit' id='submitbutton'>Submit</rb.Button>\r\n              </rb.Form>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport SwipeNav from '../components/Nav.js';\r\n// import * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class WebpageNotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Error 404: Page not found</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\n\r\nimport LoginService from '../services/LoginService.js';\r\n// import { getURL } from '../Utils.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass Login extends Component {\r\n\r\n  async submitLogin() {\r\n    let email = document.getElementById('login-email').value;\r\n    let pw = document.getElementById('login-pw').value;\r\n\r\n    await LoginService.logIn(email, pw);\r\n\r\n    this.props.history.push('/dashboard');\r\n  }\r\n\r\n  async submitSignup() {\r\n    let email = document.getElementById('signup-email').value;\r\n    let pw = document.getElementById('signup-pw').value;\r\n\r\n    await LoginService.createProfile(email, pw);\r\n\r\n    this.props.history.push('/dashboard');\r\n  }\r\n\r\n  render() {\r\n    if (LoginService.isLoggedIn()) {\r\n      return <Redirect to='/dashboard' />\r\n    }\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<SwipeNav />\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='pagetitle'>Login</h1>\r\n\t\t\t\t</div>\r\n\r\n        <div className='container'>\r\n          <h5>Log in</h5>\r\n          <div className='loginform'>\r\n            <rb.Form>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control id='login-email' placeholder=\"<kerb>@mit.edu\" type='email' />\r\n              </rb.Form.Group>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Password:</rb.Form.Label>\r\n                <rb.Form.Control id='login-pw' placeholder='Password' type='password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.submitLogin()}>Log In</rb.Button>\r\n            </rb.Form>\r\n          </div>\r\n\r\n          <br/>\r\n          \r\n          <h5>Sign Up</h5>\r\n          <div className='loginform'>\r\n            <rb.Form>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control id='signup-email' placeholder=\"<kerb>@mit.edu\" type='email' />\r\n              </rb.Form.Group>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Password:</rb.Form.Label>\r\n                <rb.Form.Control id='signup-pw' placeholder='Password' type='password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.submitSignup()}>Sign Up</rb.Button>\r\n            </rb.Form>\r\n          </div>\r\n        </div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default withRouter(Login);","import React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\n\r\nimport Home from './views/Home';\r\nimport Profile from './views/Profile';\r\nimport Dashboard from './views/Dashboard';\r\nimport SwipeView from './views/SwipeView';\r\nimport AddSwipe from './views/AddSwipe';\r\nimport WebpageNotFound from './views/404.js';\r\nimport Login from './views/Login';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route exact={true} path='/' render={() => (\r\n          <Home />\r\n        )} />\r\n        <Route exact={true} path='/profile' render={() => (\r\n          <Profile />\r\n        )} />\r\n        <Route exact={true} path='/dashboard' render={() => (\r\n          <Dashboard />\r\n        )} />\r\n        <Route exact={true} path='/swipeinfo/:id' render={() => (\r\n          <SwipeView />\r\n        )} />\r\n        <Route exact={true} path='/addswipe' render={() => (\r\n          <AddSwipe />\r\n        )} />\r\n        <Route exact={true} path='/login' render={() => (\r\n          <Login />\r\n        )} />\r\n        <Route path=\"*\" exact={true} render={() => (\r\n          <WebpageNotFound />\r\n        )} />\r\n      </Switch>\r\n    </HashRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}