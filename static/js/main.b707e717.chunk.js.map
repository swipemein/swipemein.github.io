{"version":3,"sources":["services/LoginService.js","components/Nav.js","views/Home.js","Objects.js","components/Swipe.js","views/Profile.js","components/Constants.js","views/Dashboard.js","views/SwipeView.js","views/Login.js","views/AddSwipe.js","views/404.js","App.js","serviceWorker.js","index.js"],"names":["LoginService","url","this","clientID","redirectURI","scope","forEach","param","label","value","code","requestToken","xhr","XMLHttpRequest","onreadystatechange","receiveToken","open","setRequestHeader","responseType","body","send","xhrResponse","readyState","DONE","getUserInfo","response","resp","userDocRef","fb","collection","doc","localStorage","setItem","console","log","getItem","get","then","exists","set","email","name","anon","reputation","window","location","reload","removeItem","to","exact","SwipeNav","props","state","loggedIn","navbarItems","Link","href","onClick","logOut","Brand","Collapse","className","Component","Home","includes","split","login","class","title","text","InfoCard","Body","Title","Text","Student","rep","studentFromFirebase","data","swipeObjectFromFirebase","SwipeObject","swipeTime","Date","available","claimed","owner","active","cancelled","timeCreated","firebaseID","id","time","amount","toLocaleDateString","toLocaleTimeString","Swipe","tokens","path","swipe","swipeID","length","setState","Subtitle","getTimeString","Profile","student","swipePaths","subID","docRef","snapshot","swipes","docs","push","isLoggedIn","redirectLogin","key","Group","Label","Control","placeholder","type","Check","defaultValue","plaintext","readOnly","getRepString","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","diningHallStrings","reputationStrings","Dashboard","updated","swipesData","filter","day","date","now","setHours","parseInt","setMinutes","getTime","strings","checks","s","defaultChecked","alert","getTimestamp","Object","keys","checkFilterComplete","swipesRef","filteredHalls","hall","where","Timestamp","fromMillis","event","preventDefault","form","document","getElementById","concat","checked","$","val","getHours","getMinutes","diningHallCheckboxes","makeCheckboxes","repCheckboxes","Header","Toggle","as","rb","eventKey","onSubmit","e","getFilteredResults","getFormFormattedTime","Row","SwipeView","hashes","hash","Login","getRedirectUrl","AddSwipe","swipeTimestamp","parse","db","add","disabled","diningHalls","map","submitForm","min","step","WebpageNotFound","App","basename","process","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b707e717.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nclass LoginService {\r\n  static clientID = \"8fbfe55e-51b6-40df-a8e2-0a38690e2a9f\";\r\n  static responseType = \"code\";\r\n  static scope = \"openid profile email\";\r\n  static redirectURI = \"https://swipemein.github.io/\";\r\n\r\n  // Get url to redirect to OIDC to authenticate\r\n  static getRedirectUrl() {\r\n    let url = \"https://oidc.mit.edu/authorize?response_type=code\";\r\n    \r\n    let params = [\r\n      [\"client_id\", this.clientID],\r\n      // [\"response_type\", this.responseType],\r\n      [\"redirect_uri\", this.redirectURI],\r\n      [\"scope\", this.scope],\r\n    ];\r\n\r\n    params.forEach(param => {\r\n      let label = param[0], value = param[1];\r\n      url += \"&\" + label + \"=\" + value;\r\n    });\r\n    return url;\r\n  }\r\n\r\n  // Log in with code returned from OIDC\r\n  static login(code) {\r\n    this.requestToken(code);\r\n  }\r\n  \r\n  static requestToken(code) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = () => this.receiveToken(xhr);\r\n  \r\n    xhr.open(\"POST\", \"https://oidc.mit.edu/token\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.responseType = \"json\";\r\n  \r\n    let body = \"grant_type=authorization_code\";\r\n    body += \"&code=\" + code;\r\n    body += \"&redirect_uri=https://swipemein.github.io/\";\r\n    body += \"&client_id=8fbfe55e-51b6-40df-a8e2-0a38690e2a9f\";\r\n    body += \"&client_secret=D1vTFSOtY8zdbsiliGbDWf8tJCMtJ7IWPkLyROnp4yxhgpQWqeBRQWGRjj6NEFl_M4dt5k9dvgAA8k4v2poWxQ\";\r\n  \r\n    xhr.send(body);\r\n  }\r\n\r\n  static receiveToken(xhrResponse) {\r\n    if (xhrResponse.readyState === XMLHttpRequest.DONE) {\r\n      let xhr = new XMLHttpRequest();\r\n      xhr.onreadystatechange = () => this.getUserInfo(xhr);\r\n\r\n      xhr.open(\"GET\", \"https://oidc.mit.edu/userinfo\");\r\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + xhrResponse.response[\"access_token\"]);\r\n      xhr.responseType = \"json\";\r\n\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  static getUserInfo(xhrResponse) {\r\n    if (xhrResponse.readyState === XMLHttpRequest.DONE) {\r\n      let resp = xhrResponse.response;\r\n      let db = fb.firestore();\r\n      let userDocRef = db.collection('users').doc(resp['sub']);\r\n      localStorage.setItem('subID', resp['sub']);\r\n      console.log(localStorage.getItem(\"subID\"));\r\n\r\n      userDocRef.get().then((doc) => {\r\n        if (!doc.exists) {\r\n          console.log(resp);\r\n          console.log('does not exist');\r\n          doc.set({\r\n            email: resp['email'],\r\n            name: resp['name'],\r\n            anon: false,\r\n            reputation: 1\r\n            // swipes listed (empty)\r\n            // swipes claimed (empty)\r\n          });\r\n        }\r\n      });\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  static logOut() {\r\n    localStorage.removeItem('subID');\r\n  }\r\n\r\n  static isLoggedIn() {\r\n    return localStorage.getItem('subID') !== null;\r\n  }\r\n\r\n  static redirectLogin() {\r\n    return <Redirect to='/login' exact={true} />\r\n  }\r\n}\r\n\r\nexport default LoginService;","import React, { Component} from 'react';\r\n\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport '../site.css';\r\n\r\nexport default class SwipeNav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedIn: !(localStorage.getItem(\"subID\") === null)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let navbarItems;\r\n        if (!this.state.loggedIn) {\r\n            navbarItems = (\r\n                <>\r\n                <rb.Nav.Link href='/#/login'>Login</rb.Nav.Link>\r\n                </>\r\n            );\r\n        } else {\r\n            navbarItems = (\r\n                <>\r\n                <rb.Nav.Link href='/#/dashboard'>Dashboard</rb.Nav.Link>\r\n                <rb.Nav.Link href='/#/profile'>Profile</rb.Nav.Link>\r\n                <rb.Nav.Link href='/' onClick={() => LoginService.logOut()}>Logout</rb.Nav.Link>\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <rb.Navbar>\r\n                <rb.Navbar.Brand href='/'>SwipeMeIn</rb.Navbar.Brand>\r\n                <rb.Navbar.Collapse>\r\n                    <rb.Nav className='ml-auto'>\r\n                        {navbarItems}\r\n                    </rb.Nav>\r\n                </rb.Navbar.Collapse>\r\n            </rb.Navbar>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import * as fb from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/firestore';\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Login info\r\n    let url = window.location.href;\r\n    if (url.includes(\"code\") && localStorage.getItem('subID') === null) {\r\n      let suffix = url.split(\"?\")[1];\r\n      let assignment = suffix.split(\"#\")[0];\r\n      let code = assignment.split(\"=\")[1];\r\n      LoginService.login(code);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div class='container-fluid homephotos'>\r\n\r\n          <div class='hometitle container'>\r\n            <h2>SwipeMeIn</h2>\r\n          </div>\r\n          <div class='homeinfo container-fluid'>\r\n            <div class='col-xs-4 homedescription'>\r\n              <div class='container'>\r\n                <h3>What is SwipeMeIn?</h3>\r\n\r\n              </div>\r\n              <div class='container'>\r\n                <p>We’ve all been there: it’s 7 PM, you’re on campus, and you’re hungry. You have two options: spend an absurd amount of money for on-campus dining or ask a friend to lend you a swipe.</p>\r\n                <p>With meal plan minimums increasing and limited swipe donation programs to take advantage of, countless students end each year with extra swipes that are wasted. SwipeMeIn is a platform for those with extra swipes to make the most of their surplus and the hungry to score a free meal.</p>\r\n\r\n              </div>\r\n              {/* <div class='homedirections container'>\r\n                <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n              </div> */}\r\n              <div class='homedirections row container'>\r\n                <div class='col'>\r\n                  <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                </div>\r\n                <div class='col'>\r\n                  <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                </div>\r\n                <div class='col'>\r\n                  <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InfoCard extends Component {\r\n  render() {\r\n    return (\r\n      // <div class='col-xs-1'>\r\n      <rb.Card>\r\n        <rb.Card.Body>\r\n          <rb.Card.Title>{this.props.title}</rb.Card.Title>\r\n          <rb.Card.Text>{this.props.text}</rb.Card.Text>\r\n        </rb.Card.Body>\r\n      </rb.Card>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n","\r\n// import * as fb from 'firebase/app';\r\n\r\nexport class Student {\r\n    constructor({\r\n        name = \"Student Name\",\r\n        email = \"studentemail@mit.edu\",\r\n        anon = false,\r\n        rep = 0,\r\n    } = {}) {\r\n        this.name = name;\r\n        this.email = email;\r\n        this.anon = anon;\r\n        this.rep = rep;\r\n    }\r\n    \r\n    getRepString() {\r\n        return (this.rep > .5) ? \"Good\" : \"Bad\";\r\n    }\r\n}\r\n\r\nexport function studentFromFirebase(doc) {\r\n    let data = doc.data();\r\n    return new Student({\r\n        name: data['name'],\r\n        email: data['email'],\r\n        anon: data['anon'],\r\n        rep: data['rep']\r\n    });\r\n}\r\n\r\nexport function swipeObjectFromFirebase(doc) {\r\n    // let owner;\r\n    let data = doc.data();\r\n    return new SwipeObject({\r\n        location: data['location'],\r\n        swipeTime: new Date(data['swipeTime']['seconds'] * 1000),\r\n        available: data['available'],\r\n        claimed: data['claimed'],\r\n        owner: new Student(),\r\n        active: data['active'],\r\n        cancelled: data['cancelled'],\r\n        timeCreated: new Date(data['timeCreated']['seconds'] * 1000),\r\n        firebaseID: doc.id\r\n    });\r\n}\r\n\r\nexport default class SwipeObject {\r\n    constructor({\r\n        location=\"Location\",\r\n        swipeTime = new Date(2000, 1, 1, 1, 1, 0, 0),\r\n        available = 0,\r\n        claimed = 0,\r\n        owner = new Student(),\r\n        active = null,\r\n        cancelled = null,\r\n        timeCreated = new Date(),\r\n        firebaseID = null\r\n    } = {}) {\r\n        this.location = location;\r\n        this.time = swipeTime;\r\n        this.amount = available;\r\n        this.claimed = claimed;\r\n        this.owner = owner;\r\n        this.active = active;\r\n        this.cancelled = cancelled;\r\n        this.firebaseID = firebaseID;\r\n    }\r\n    \r\n    getTimeString() {\r\n        return this.time.toLocaleDateString() + \", \" + this.time.toLocaleTimeString()\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeObject, {swipeObjectFromFirebase} from '../Objects.js';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Swipe extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        let tokens = this.props.path.split('/');\r\n        this.state = {\r\n            swipe: new SwipeObject(),\r\n            swipeID: tokens[tokens.length-1]\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let db = fb.firestore();\r\n        let docRef = db.collection('swipes').doc(this.state.swipeID);\r\n        docRef.get().then(doc => {\r\n            this.setState({\r\n                swipe: swipeObjectFromFirebase(doc)\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class='swipecard container'>\r\n                <div class='col-xs-4'>\r\n                    <rb.Card>\r\n                        <rb.Card.Body>\r\n                            <rb.Card.Title>{ this.state.swipe.location }</rb.Card.Title>\r\n                            <rb.Card.Subtitle>{ this.state.swipe.getTimeString() }</rb.Card.Subtitle>\r\n                            <rb.Card.Text>\r\n\r\n                            </rb.Card.Text>\r\n                            <rb.Button>Claim Swipe</rb.Button>\r\n                            <rb.Card.Link href={'/#/swipeinfo/'+this.state.swipeID}>Info</rb.Card.Link>\r\n                        </rb.Card.Body>\r\n                    </rb.Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport {Student, studentFromFirebase} from '../Objects.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nexport default class Profile extends Component {\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      \r\n      this.state = {\r\n         student: new Student(),\r\n         swipePaths: []\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      let subID = localStorage.getItem('subID');\r\n      let db = fb.firestore();\r\n      let docRef = db.collection('users').doc(subID);\r\n      docRef.get().then(doc => {\r\n         this.setState({\r\n            student: studentFromFirebase(doc),\r\n         });\r\n      });\r\n\r\n      let swipesRef = docRef.collection('swipes');\r\n      swipesRef.get().then(snapshot => {\r\n         let swipes = [];\r\n         snapshot.docs.forEach(doc => {\r\n            swipes.push(doc.data()['swipe']['path']);\r\n         });\r\n         this.setState({\r\n            swipePaths: swipes\r\n         });\r\n      });\r\n   }\r\n  \r\n   render () {\r\n      if (!LoginService.isLoggedIn()) {\r\n         return LoginService.redirectLogin();\r\n      }\r\n\r\n      let student = this.state.student;\r\n      let swipes = [];\r\n      this.state.swipePaths.forEach(path => {\r\n         swipes.push(<Swipe path={path} key={path} />);\r\n      });\r\n\r\n      return (\r\n        <div>\r\n            <SwipeNav/>\r\n            <div class='container'>\r\n               <h1 class=\"pagetitle\">Profile</h1>\r\n            </div>\r\n            <div class='container'>\r\n               <div class='container'>\r\n                  <h5>Info</h5>\r\n                  <div class='container'>\r\n                     <rb.Form>\r\n                        <rb.Form.Group>\r\n                           <rb.Form.Label>Name:</rb.Form.Label>\r\n                           <rb.Form.Control placeholder={student.name}/>\r\n                        </rb.Form.Group>\r\n                        <rb.Form.Group>\r\n                           <rb.Form.Label>Email:</rb.Form.Label>\r\n                           <rb.Form.Control type=\"email\" placeholder={student.email} />\r\n                        </rb.Form.Group>\r\n                        <rb.Form.Group>\r\n                           <rb.Form.Label>Anonymity:</rb.Form.Label>\r\n                           <rb.Form.Check type='switch' label='Anonymous - swipers will not see your name when you claim or advertise a swipe.' \r\n                           defaultValue={student.anon}/>\r\n                        </rb.Form.Group>\r\n                        <rb.Form.Group>\r\n                           <rb.Form.Label>Reputation:</rb.Form.Label>\r\n                           <rb.Form.Control plaintext readOnly placeholder={student.getRepString()}/>\r\n                        </rb.Form.Group>\r\n                     </rb.Form>\r\n                  </div>\r\n                  <div class='container row'>\r\n                  <div class='col-xs-4'>\r\n                     <h5>Your swipes</h5>\r\n                     <div class='container'>\r\n                        {swipes}\r\n                     </div>\r\n\r\n                  </div>\r\n                  <div class='col-xs-4'>\r\n                     <h5>Swipes you've claimed</h5>\r\n                     <div class='container'>\r\n                     </div>\r\n                  </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n        </div>\r\n      )\r\n   }\r\n}","\r\nexport const firebaseConfig = {\r\n    apiKey: \"AIzaSyDdmc4unsGL4p64Lrl7GH5uQ7iJZ3gEnqo\",\r\n    authDomain: \"swipemein-20d09.firebaseapp.com\",\r\n    databaseURL: \"https://swipemein-20d09.firebaseio.com\",\r\n    projectId: \"swipemein-20d09\",\r\n    storageBucket: \"swipemein-20d09.appspot.com\",\r\n    messagingSenderId: \"106834805176\",\r\n    appId: \"1:106834805176:web:7431e8cf5325603a99cf4d\",\r\n    measurementId: \"G-248JREEMRL\"\r\n  };\r\n\r\nexport const diningHallStrings = ['Maseeh', 'McCormick', 'Baker', 'Next', 'Simmons'];\r\n\r\nexport const reputationStrings = ['Reliable', 'Somewhat Reliable', 'Flaky'];\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\nimport {diningHallStrings, reputationStrings} from '../components/Constants.js';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport $ from 'jquery';\r\n\r\nexport default class Dashboard extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        this.updated = false;\r\n        this.state = {\r\n            swipesData: [],\r\n            filter: {}\r\n        }\r\n    }\r\n\r\n    getTimestamp(time, day) {\r\n        let filter = this.state.filter;\r\n        let date;\r\n        if (filter[day] === \"Today\") {\r\n            date = new Date(Date.now());\r\n        } else if (filter[day] === \"Tomorrow\") {\r\n            date = new Date(Date.now() + 24*60*60*1000);\r\n        }\r\n        date.setHours(parseInt(filter[time].split(\":\")[0]));\r\n        date.setMinutes(parseInt(filter[time].split(\":\")[1]));\r\n        return date.getTime();\r\n    }\r\n\r\n    makeCheckboxes(strings) {\r\n        let checks = [];\r\n        strings.forEach(s => {\r\n            checks.push(\r\n                <rb.Form.Check type='checkbox' label={s} key={s} id={s} name={s} defaultChecked />\r\n            );\r\n        });\r\n        return checks;\r\n    }\r\n\r\n    checkFilterComplete() {\r\n        let filter = this.state.filter;\r\n        if (filter['starttime'] === \"\") {\r\n            alert(\"Please enter a start time.\");\r\n            return false;\r\n        } else if (filter['endtime'] === \"\") {\r\n            alert(\"Please enter an end time.\");\r\n            return false;\r\n        } else if (this.getTimestamp('endtime', 'endtimeday') < this.getTimestamp('starttime', 'starttimeday')) {\r\n            alert(\"End time must be after start time.\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (Object.keys(this.state.filter).length === 0) {\r\n            // Initial state\r\n            return;\r\n        } else if (this.updated) {\r\n            // Prevent infinited updates\r\n            this.updated = false;\r\n            return;\r\n        } else if (!this.checkFilterComplete()) {\r\n            return;\r\n        }\r\n        this.updated = true;\r\n        let db = fb.firestore();\r\n        let swipesRef = db.collection('swipes');\r\n        let filteredHalls = diningHallStrings.filter(hall => this.state.filter[hall]);\r\n\r\n        let filteredSwipesRef = swipesRef\r\n            .where(\"swipeTime\", \">=\", \r\n                fb.firestore.Timestamp.fromMillis(this.getTimestamp('starttime', 'starttimeday')))\r\n            .where(\"swipeTime\", \"<=\", \r\n                fb.firestore.Timestamp.fromMillis(this.getTimestamp('endtime', 'endtimeday')))\r\n            .where(\"location\", \"in\", filteredHalls);\r\n\r\n        filteredSwipesRef.get().then(snapshot => {\r\n            let swipes = [];\r\n            snapshot.docs.forEach(doc => {\r\n                swipes.push(doc.id);\r\n            });\r\n            this.setState({\r\n                swipesData: swipes\r\n            });\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        let db = fb.firestore();\r\n        let swipesRef = db.collection('swipes');\r\n        \r\n        // All swipes in the next 24 hours\r\n        let filteredSwipesRef = swipesRef\r\n            .where(\"swipeTime\", \">=\", new Date(Date.now()))\r\n            .where(\"swipeTime\", \"<=\", new Date(Date.now() + 24*60*60*1000)); // now + 1 day\r\n\r\n        filteredSwipesRef.get().then(snapshot => {\r\n            let swipes = [];\r\n            snapshot.docs.forEach(doc => {\r\n                swipes.push(doc.id);\r\n            });\r\n            this.setState({\r\n                swipesData: swipes\r\n            });\r\n        });\r\n    }\r\n\r\n    getFilteredResults(event) {\r\n        event.preventDefault();\r\n        let form = {};\r\n        ['starttime', 'endtime'].forEach(key => {\r\n            form[key] = document.getElementById(key).value;\r\n        });\r\n        diningHallStrings.concat(reputationStrings).forEach(key => {\r\n            form[key] = document.getElementById(key).checked;\r\n        });\r\n        ['starttimeday', 'endtimeday'].forEach(key => {\r\n            form[key] = $('input:radio[name='+key+']:checked').val();\r\n        });\r\n        this.setState({\r\n            filter: form\r\n        });\r\n    }\r\n\r\n    getFormFormattedTime(date) {\r\n        return (date.getHours()>=10 ? date.getHours() : \"0\"+date.getHours()) + \r\n            \":\" + \r\n            (date.getMinutes()>=10 ? date.getMinutes() : \"0\"+date.getMinutes());\r\n    }\r\n  \r\n    render () {\r\n        if (!LoginService.isLoggedIn()) {\r\n            return LoginService.redirectLogin();\r\n        }\r\n        let swipes = [];\r\n        this.state.swipesData.forEach(id => {\r\n            swipes.push(<Swipe path={id} key={id} />);\r\n        });\r\n        let diningHallCheckboxes = this.makeCheckboxes(diningHallStrings);\r\n        let repCheckboxes = this.makeCheckboxes(reputationStrings);\r\n        return (\r\n            <>\r\n            <SwipeNav/>\r\n            <div class='container'>\r\n                <h1 class='pagetitle'>Swipe Dashboard</h1>\r\n            </div>\r\n            <div class='container'>\r\n                <div class='row container' id='middashboard'>\r\n                    <div class='col'>\r\n                        <rb.Accordion>\r\n                            <rb.Card>\r\n                                <rb.Card.Header>\r\n                                    <rb.Accordion.Toggle as={rb.Button} eventKey=\"0\">\r\n                                        Filter\r\n                                    </rb.Accordion.Toggle>\r\n                                </rb.Card.Header>\r\n                                <rb.Accordion.Collapse eventKey=\"0\">\r\n                                    <rb.Card.Body>\r\n                                        <rb.Form onSubmit={(e) => this.getFilteredResults(e)} id='filterform' name='filterform'>\r\n                                            <h2>Dining Halls:</h2>\r\n                                            <rb.Form.Group>\r\n                                                {diningHallCheckboxes}\r\n                                            </rb.Form.Group>\r\n                                            <h2>Swipe Me In Between:</h2>\r\n                                            <rb.Form.Group>\r\n                                                <rb.Form.Label>Start</rb.Form.Label>\r\n                                                <rb.Form.Control type='time' id='starttime' defaultValue={this.getFormFormattedTime(new Date(Date.now()))} />\r\n                                                <rb.Form.Row>\r\n                                                    <rb.Form.Check type='radio' name='starttimeday' label='Today' value=\"Today\" defaultChecked />\r\n                                                    <rb.Form.Check type='radio' name='starttimeday' label='Tomorrow' value=\"Tomorrow\" />\r\n                                                </rb.Form.Row>\r\n                                                <rb.Form.Label>End</rb.Form.Label>\r\n                                                <rb.Form.Control type='time' id='endtime' defaultValue={this.getFormFormattedTime(new Date(Date.now() + 24*60*60*1000))} />\r\n                                                <rb.Form.Row>\r\n                                                    <rb.Form.Check type='radio' name='endtimeday' label='Today' value=\"Today\" />\r\n                                                    <rb.Form.Check type='radio' name='endtimeday' label='Tomorrow' value=\"Tomorrow\" defaultChecked />\r\n                                                </rb.Form.Row>\r\n                                            </rb.Form.Group>\r\n                                            <h2>Swiper Reputation:</h2>\r\n                                            <rb.Form.Group>\r\n                                                {repCheckboxes}\r\n                                            </rb.Form.Group>\r\n                                            <rb.Accordion.Toggle type='submit' as={rb.Button} eventKey=\"0\">\r\n                                                Filter Results\r\n                                            </rb.Accordion.Toggle>\r\n                                        </rb.Form>\r\n                                    </rb.Card.Body>\r\n                                </rb.Accordion.Collapse>\r\n                            </rb.Card>\r\n                        </rb.Accordion>\r\n                    </div>\r\n                    <div class='col'>\r\n                        <rb.Button class='btn-block' href='/#/addswipe' id='addswipebutton'>Add Swipe</rb.Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class='container'>\r\n                {swipes}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport SwipeObject, {swipeObjectFromFirebase} from '../Objects.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nexport default class SwipeView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            swipe: new SwipeObject()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let hashes = window.location.hash.split(\"/\");\r\n        let swipeID = hashes[hashes.length-1];\r\n        let db = fb.firestore();\r\n        let docRef = db.collection('swipes').doc(swipeID);\r\n        docRef.get().then(doc => {\r\n            this.setState({\r\n                swipe: swipeObjectFromFirebase(doc)\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!LoginService.isLoggedIn()) {\r\n            return LoginService.redirectLogin();\r\n        }\r\n        let swipe = this.state.swipe;\r\n        return (\r\n            <>\r\n            <SwipeNav />\r\n            <div class='container'>\r\n                <div class='col-xs-4'>\r\n                    <rb.Card>\r\n                        <rb.Card.Body>\r\n                            <rb.Card.Title>{ swipe.location }</rb.Card.Title>\r\n                            <rb.Card.Subtitle>{ swipe.getTimeString() }</rb.Card.Subtitle>\r\n                            <ul>\r\n                                <li>\r\n                                    Swipes Remaining: {swipe.amount - swipe.claimed} / {swipe.amount}\r\n                                </li>\r\n                                <li>\r\n                                    Owner: {swipe.owner.name}\r\n                                </li>\r\n                                <li>\r\n                                    Owner reputation: {swipe.owner.rep}\r\n                                </li>\r\n                                <li>\r\n                                    Status: {swipe.cancelled ? \"Cancelled\" : \"Open\"}\r\n                                </li>\r\n                                <li>\r\n                                    Active: {swipe.active ? \"Active\" : \"Retired\"}\r\n                                </li>\r\n                            </ul>\r\n                            <rb.Button>Claim Swipe</rb.Button>\r\n                        </rb.Card.Body>\r\n                    </rb.Card>\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}","import * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\n// import * as fb from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/firestore';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.url = LoginService.getRedirectUrl();\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div class='container'>\r\n          <a href={this.url}><rb.Button>Login</rb.Button></a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\nimport {diningHallStrings} from '../components/Constants.js';\r\n\r\nimport * as fb from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class AddSwipe extends Component {\r\n\r\n    submitForm(event) {\r\n        event.preventDefault();\r\n        let form = {};\r\n        ['swipedininghall', 'swipedate', 'swipetime', 'swipecount'].forEach(key => {\r\n            form[key] = document.getElementById(key).value;\r\n        });\r\n        if (form['swipedate'] === \"\") {\r\n            alert(\"Please enter the date of your swipe.\");\r\n            return;\r\n        }\r\n        if (form['swipetime'] === \"\") {\r\n            alert(\"Please enter the time of your swipe.\");\r\n            return;\r\n        }\r\n        if (form['swipecount'] === \"\") {\r\n            alert(\"Please enter the number of swipes.\");\r\n            return;\r\n        }\r\n        let swipeTimestamp = Date.parse(form['swipedate'] + \"T\" + form['swipetime']);\r\n        let db = fb.firestore();\r\n        db.collection('swipes').add({\r\n            active: true,\r\n            available: parseInt(form['swipecount']),\r\n            cancelled: false,\r\n            claimed: 0,\r\n            location: form['swipedininghall'],\r\n            owner: db.collection('users').doc(localStorage.getItem('subID')),\r\n            swipeTime: fb.firestore.Timestamp.fromMillis(swipeTimestamp),\r\n            timeCreated: fb.firestore.Timestamp.now()\r\n        });\r\n        document.getElementById('submitbutton').disabled = true;\r\n        document.getElementById('addbutton').disabled = false;\r\n    }\r\n\r\n    render() {\r\n        if (!LoginService.isLoggedIn()) {\r\n            return LoginService.redirectLogin();\r\n        }\r\n        let diningHalls = diningHallStrings.map(hall => <option key={hall}>{hall}</option>);\r\n        // diningHallStrings.forEach(hall => {\r\n        //     diningHalls.push(<option key={hall}>{hall}</option>)\r\n        // });\r\n        return (\r\n            <>\r\n            <SwipeNav />\r\n            <div class='container'>\r\n                <h1 class='pagetitle'>Add Swipe</h1>\r\n            </div>\r\n            <div class='container'>\r\n                <rb.Card>\r\n                <rb.Card.Body>\r\n\r\n                <rb.Form onSubmit={this.submitForm} id='swipeform'>\r\n                    <rb.Form.Group>\r\n                        <rb.Form.Label>Location</rb.Form.Label>\r\n                        <rb.Form.Control as='select' id='swipedininghall'>\r\n                            {diningHalls}\r\n                        </rb.Form.Control>\r\n                    </rb.Form.Group>\r\n                    <rb.Form.Row>\r\n                        <div class='col-xs-4'>\r\n                            <rb.Form.Group>\r\n                                <rb.Form.Label>Day</rb.Form.Label>\r\n                                <rb.Form.Control type='date' id='swipedate' />\r\n                            </rb.Form.Group>\r\n                        </div>\r\n                        <div class='col-xs-4'>\r\n                            <rb.Form.Group>\r\n                                <rb.Form.Label>Time</rb.Form.Label>\r\n                                <rb.Form.Control type='time' id='swipetime' />\r\n                            </rb.Form.Group>\r\n                        </div>\r\n                    </rb.Form.Row>\r\n                    <rb.Form.Group>\r\n                        <rb.Form.Label>Swipes to Give</rb.Form.Label>\r\n                        <rb.Form.Control type='number' min='1' step='1' id='swipecount' />\r\n                    </rb.Form.Group>\r\n                    <rb.Button type='submit' id='submitbutton'>Submit</rb.Button>\r\n                </rb.Form>\r\n                </rb.Card.Body>\r\n                </rb.Card>\r\n                <div class='container'>\r\n                    <br></br>\r\n                    <a href='/#/addswipe'><rb.Button id='addbutton' disabled>Add Another Swipe</rb.Button></a>\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport SwipeNav from '../components/Nav.js';\r\n// import * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class WebpageNotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SwipeNav />\r\n                <div class='container'>\r\n                    <h1 class='pagetitle'>Error 404: Page not found</h1>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n\nimport * as fb from 'firebase/app'; \nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport Home from './views/Home';\nimport Profile from './views/Profile';\nimport Dashboard from './views/Dashboard';\nimport SwipeView from './views/SwipeView';\nimport Login from './views/Login';\nimport AddSwipe from './views/AddSwipe';\nimport WebpageNotFound from './views/404.js';\n\nimport {firebaseConfig} from './components/Constants.js';\n\n\n\nfunction App() {\n\n  // Firebase setup\n  if (fb.apps.length === 0) fb.initializeApp(firebaseConfig);\n  \n  return (\n    <>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact={true} path='/' render={() => (\n          <Home />\n        )} />\n        <Route exact={true} path='/profile' render={() => (\n          <Profile />\n        )} />\n        <Route exact={true} path='/dashboard' render={() => (\n          <Dashboard />\n        )} />\n        <Route exact={true} path='/swipeinfo/:id' render={() => (\n          <SwipeView />\n        )} />\n        <Route exact={true} path='/login' render={() => (\n          <Login />\n        )} />\n        <Route exact={true} path='/addswipe' render={() => (\n          <AddSwipe />\n        )} />\n        <Route path=\"*\" exact={true} render={() => (\n          <WebpageNotFound />\n        )} />\n      </Switch>\n    </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}