{"version":3,"sources":["assets/smi-logo.png","Utils.js","services/LoginService.js","components/Nav.js","components/Footer.js","views/Home.js","components/Swipe.js","views/Profile.js","components/Constants.js","views/Dashboard.js","views/SwipeView.js","views/AddSwipe.js","views/404.js","views/Login.js","App.js","serviceWorker.js","index.js"],"names":["getTimeString","swipeTime","datetime","Date","toLocaleDateString","toLocaleTimeString","sortBySwipeTime","swipeDatas","sort","a","b","sortSwipes","price","compareSwipes","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","onAuthStateChanged","user","getIdToken","then","idToken","LoginService","getToken","changeToken","window","location","reload","catch","error","logOut","alert","code","email","password","createUserWithEmailAndPassword","userCredential","token","_tokenResponse","uid","storeToken","fetch","getURL","method","headers","console","log","text","t","sendEmailVerification","currentUser","sendPasswordResetEmail","signInWithEmailAndPassword","signOut","removeToken","undefined","localStorage","setItem","removeItem","getItem","to","exact","SwipeNav","navbarItems","isLoggedIn","Link","href","onClick","Brand","id","src","logo","height","alt","Collapse","className","Component","Footer","target","rel","Home","props","url","includes","process","REACT_APP_SUB_ID","split","login","title","InfoCard","Body","Title","this","Text","Swipe","state","swipe","deleted","event","preventDefault","response","status","json","data","setState","claimSwipeButton","claimedBy","e","claimSwipe","getUID","unclaimSwipe","disabled","Subtitle","ownedBy","firstName","deleteSwipe","socialPreference","Profile","name","passwordButtonText","profileButtonText","sendVerificationEmail","ownedSwipes","claimedSwipes","newName","document","getElementById","value","newSocialPreference","body","JSON","stringify","passwordInput","newPassword","r","swipes","Object","values","map","swipeData","userData","emailVerified","getUserOwnedSwipes","getUserClaimedSwipes","redirectLogin","emailVerificationText","reverse","Group","Label","Control","type","defaultValue","placeholder","updateProfile","changePassword","length","diningHallStrings","Dashboard","loading","form","forEach","key","checked","push","getSwipes","strings","checks","s","Check","label","defaultChecked","diningHallCheckboxes","makeCheckboxes","Header","Toggle","as","rb","eventKey","onSubmit","getFilteredResults","SwipeView","hashes","hash","swipeID","entries","AddSwipe","parse","active","Number","diningHalls","hall","submitForm","Row","step","min","WebpageNotFound","Login","pw","logIn","history","createProfile","resetPassword","submitLogin","submitSignup","submitResetPassword","withRouter","App","basename","path","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5faf0d6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/smi-logo.218d5095.png\";","export const getTimeString = swipeTime => {\r\n  const datetime = new Date(swipeTime*1000);\r\n  return datetime.toLocaleDateString() + \", \" + datetime.toLocaleTimeString()\r\n}\r\n\r\nexport const getURL = () => {\r\n  // return \"http://localhost:5000\";\r\n  return \"https://swipemein.herokuapp.com\";\r\n}\r\n\r\nexport const sortBySwipeTime = swipeDatas => {\r\n  return swipeDatas.sort((a, b) => a.swipeTime - b.swipeTime);\r\n}\r\n\r\nconst compareSwipes = (a, b) => {\r\n  if (a.swipeTime === b.swipeTime) {\r\n    return a.price - b.price;\r\n  }\r\n  return a.swipeTime - b.swipeTime;\r\n}\r\n\r\nexport const sortSwipes = swipeDatas => {\r\n  return swipeDatas.sort((a,b) => compareSwipes(a,b));\r\n}","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { getURL } from '../Utils';\r\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, getIdToken, sendPasswordResetEmail, sendEmailVerification } from 'firebase/auth';\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDAVAezS1NPeLwvjW_Ldx3NYbSsWzdTGPg\",\r\n  authDomain: \"swipemein-storage.firebaseapp.com\",\r\n  projectId: \"swipemein-storage\",\r\n  storageBucket: \"swipemein-storage.appspot.com\",\r\n  messagingSenderId: \"810938213396\",\r\n  appId: \"1:810938213396:web:44f1aff1b0f0b3a3553301\",\r\n  measurementId: \"G-E7QJK7RDFJ\"\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\nconst auth = getAuth();\r\n\r\nonAuthStateChanged(auth, user => {\r\n  if (user) {\r\n    getIdToken(user).then(idToken => {\r\n      if (idToken !== LoginService.getToken()) {\r\n        LoginService.changeToken(idToken);\r\n        window.location.reload();\r\n      }\r\n    }).catch((error) => {\r\n      LoginService.logOut();\r\n      alert('Error getting login: ' + error.code);\r\n    });\r\n  }\r\n});\r\n\r\nclass LoginService {\r\n\r\n  static async createProfile(email, password) {\r\n    let token;\r\n    let uid;\r\n    await createUserWithEmailAndPassword(auth, email, password)\r\n      .then((userCredential) => {\r\n        token = userCredential._tokenResponse.idToken;\r\n        uid = userCredential.user.uid;\r\n        LoginService.storeToken(token, uid);\r\n      })\r\n      .catch((error) => {\r\n        alert('Error creating user: ' + error.code);\r\n      });\r\n    \r\n    await fetch(\r\n      getURL() + '/addUser',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'text/plain',\r\n          'test': LoginService.getToken()\r\n        },\r\n      }\r\n    ).catch(error => {\r\n      console.log(error);\r\n      console.log(error.code);\r\n      error.text().then(t => console.log(t));\r\n      alert('Error inserting into database.');\r\n    });\r\n  }\r\n\r\n  static async sendVerificationEmail() {\r\n    await sendEmailVerification(auth.currentUser)\r\n      .then(() => {\r\n        alert('A verification email has been sent.');\r\n      })\r\n      .catch((error) => {\r\n        alert('Error sending a verification email: ' + error.code);\r\n      });\r\n  }\r\n\r\n  static async resetPassword(email) {\r\n    await sendPasswordResetEmail(auth, email)\r\n      .then(() => {\r\n        alert('Please follow the instructions sent to your email address.');\r\n      })\r\n      .catch((error) => {\r\n        alert('Error resetting the password: ' + error.code);\r\n      });\r\n  }\r\n\r\n  static async logIn(email, password) {\r\n    await signInWithEmailAndPassword(auth, email, password)\r\n    .then((userCredential) => {\r\n      const token = userCredential._tokenResponse.idToken;\r\n      const uid = userCredential.user.uid;\r\n      LoginService.storeToken(token, uid);\r\n    })\r\n    .catch((error) => {\r\n      alert('Error signing in: ' + error.code);\r\n    });\r\n  }\r\n  \r\n  static logOut() {\r\n    signOut(auth).then(() => {\r\n      LoginService.removeToken();\r\n    }).catch(error => {\r\n      console.log('error signing out');\r\n    });\r\n  }\r\n\r\n  static isLoggedIn() {\r\n    return LoginService.getToken() !== undefined && LoginService.getToken() !== null;\r\n  }\r\n  \r\n  static storeToken(token, uid) {\r\n    localStorage.setItem('idToken', token);\r\n    localStorage.setItem('uid', uid);\r\n  }\r\n\r\n  static changeToken(token) {\r\n    localStorage.setItem('idToken', token);\r\n  }\r\n\r\n  static removeToken() {\r\n    localStorage.removeItem('idToken');\r\n    localStorage.removeItem('uid');\r\n  }\r\n\r\n  static getToken() {\r\n    return localStorage.getItem('idToken');\r\n  }\r\n\r\n  static getUID() {\r\n    return localStorage.getItem('uid');\r\n  }\r\n\r\n  static redirectLogin() {\r\n    return <Redirect to='/login' exact={true} />\r\n  }\r\n}\r\n\r\nexport default LoginService;","import React, { Component } from 'react';\r\n\r\nimport logo from '../assets/smi-logo.png';\r\n\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport '../site.css';\r\n\r\nexport default class SwipeNav extends Component {\r\n  render() {\r\n    let navbarItems;\r\n    if (!LoginService.isLoggedIn()) {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href='/#/login'>Login</rb.Nav.Link>\r\n        </>\r\n      );\r\n    } else {\r\n      navbarItems = (\r\n        <>\r\n          <rb.Nav.Link href='/#/dashboard'>Dashboard</rb.Nav.Link>\r\n          <rb.Nav.Link href='/#/profile'>Profile</rb.Nav.Link>\r\n          <rb.Nav.Link href='/' onClick={() => LoginService.logOut()}>Logout</rb.Nav.Link>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <rb.Navbar>\r\n        <rb.Navbar.Brand id='navbrand' href='/'>\r\n          <img src={logo} height='40' alt='asdf' />\r\n          <h5>SwipeMeIn</h5>\r\n        </rb.Navbar.Brand>\r\n        <rb.Navbar.Collapse>\r\n          <rb.Nav className='ml-auto'>\r\n            {navbarItems}\r\n          </rb.Nav>\r\n        </rb.Navbar.Collapse>\r\n      </rb.Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n      <div className='footer'>\r\n        <p>Created 2021 by Christian Scarlett, Zoom Saowakon, Diana Ma, and anon. Please leave feedback or bug reports in this <a href='https://forms.gle/HvKSaiyvodTGc1jH6' target='_blank' rel=\"noreferrer\">form</a>.</p>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Login info\r\n    let url = window.location.href;\r\n    if (url.includes(\"code\") && localStorage.getItem(process.env.REACT_APP_SUB_ID) === null) {\r\n      let suffix = url.split(\"?\")[1];\r\n      let assignment = suffix.split(\"#\")[0];\r\n      let code = assignment.split(\"=\")[1];\r\n      LoginService.login(code);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container-fluid homephotos'>\r\n\r\n          <div className='hometitle container'>\r\n            <h2>SwipeMeIn</h2>\r\n          </div>\r\n          <div className='homeinfo container-fluid'>\r\n            <div className='col-xs-4 homedescription'>\r\n              <div className='container'>\r\n                <h3>What is SwipeMeIn?</h3>\r\n\r\n              </div>\r\n              <div className='container'>\r\n                <p>We’ve all been there: it’s 7 PM, you’re on campus, and you’re hungry. You have two options: spend an absurd amount of money for on-campus dining or ask a friend to lend you a swipe.</p>\r\n                <p>With meal plan minimums increasing and limited swipe donation programs to take advantage of, countless students end each year with extra swipes that are wasted. SwipeMeIn is a platform for those with extra swipes to make the most of their surplus and the hungry to score a meal.</p>\r\n                <p>Note: no money is exchanged on the website - any monetary transactions take place only between the swiper and the swipe claimer.</p>\r\n\r\n              </div>\r\n              {/* <div className='homedirections container'>\r\n                <InfoCard title=\"Log in\" text=\"Log in using your kerberos in OIDC.\" />\r\n                <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n              </div> */}\r\n              <div className='homedirections row container'>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Log in\" text=\"Log in or create an account on the login page.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Add/Claim a Swipe\" text=\"Say where and when you'll eat, or find a place and time that works for your stomach.\" />\r\n                </div>\r\n                <div className='col'>\r\n                  <InfoCard title=\"Get Swiped!\" text=\"Eat!\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InfoCard extends Component {\r\n  render() {\r\n    return (\r\n      <rb.Card>\r\n        <rb.Card.Body>\r\n          <rb.Card.Title><a href='/#/login'>{this.props.title}</a></rb.Card.Title>\r\n          <rb.Card.Text>{this.props.text}</rb.Card.Text>\r\n        </rb.Card.Body>\r\n      </rb.Card>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getTimeString, getURL } from '../Utils.js';\r\nimport LoginService from '../services/LoginService.js';\r\n\r\nexport default class Swipe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: this.props.swipe,\r\n      deleted: false,\r\n    }\r\n  }\r\n\r\n  async claimSwipe(swipe, event) {\r\n    event.preventDefault();\r\n    fetch(\r\n      getURL() + '/claimSwipe?id=' + swipe.id,\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(response => {\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't claim swipe.\");\r\n      } else if (response.status !== 200) {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      return response.json();\r\n    }).then(data => {\r\n        this.setState({\r\n          swipe: data,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  async unclaimSwipe(swipe, event) {\r\n    event.preventDefault();\r\n    fetch(\r\n      getURL() + '/unclaimSwipe?id=' + swipe.id,\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(response => {\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't unclaim swipe.\");\r\n        return null;\r\n      } else if (response.status !== 200) {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      return response.json();\r\n    }).then(data => {\r\n        if (data === null) return;\r\n        this.setState({\r\n          swipe: data,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  async deleteSwipe(swipe, event) {\r\n    event.preventDefault();\r\n    fetch(\r\n      getURL() + '/deleteswipe?id=' + swipe.id,\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(response => {\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't delete swipe.\");\r\n        return;\r\n      } else if (response.status !== 200) {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      this.setState({\r\n        deleted: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.deleted) {\r\n      return (<></>);\r\n    }\r\n\r\n    let swipe = this.state.swipe;\r\n    // console.log(swipe);\r\n    // return (<></>);\r\n\r\n    let claimSwipeButton;\r\n    if (swipe.claimedBy.id === 'null') {\r\n      claimSwipeButton = (<rb.Button onClick={e => this.claimSwipe(swipe, e)}>Claim Swipe</rb.Button>);\r\n    } else if (swipe.claimedBy.id === LoginService.getUID()) {\r\n      claimSwipeButton = (<rb.Button className='cancelClaimBtn' onClick={e => this.unclaimSwipe(swipe, e)}>Cancel Claim</rb.Button>)\r\n    } else {\r\n      claimSwipeButton = (<rb.Button disabled>Swipe Claimed</rb.Button>);\r\n    }\r\n\r\n    return (\r\n      <div className='swipecard container'>\r\n        <div className='col-xs-4'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n              <div>\r\n                <div className='row'>\r\n                  <rb.Card.Title className='col'>{swipe.location}</rb.Card.Title>\r\n                  <rb.Card.Title className='col text-right'>${swipe.price}</rb.Card.Title>\r\n                </div>\r\n                <div className='row'>\r\n                  <rb.Card.Subtitle className='col'>{getTimeString(swipe.swipeTime)}</rb.Card.Subtitle>\r\n                  <rb.Card.Text className='col swipeText'>\r\n                    {swipe.ownedBy.firstName}, {swipe.ownedBy.email}\r\n                  </rb.Card.Text>\r\n                </div>\r\n                <div className='row'>\r\n                  <div className='col claimSwipeArea'>\r\n                    {claimSwipeButton}\r\n                    <rb.Nav.Link href={'/#/swipeinfo/'+swipe.id}>Info</rb.Nav.Link>\r\n                    {\r\n                      swipe.ownedBy.id === LoginService.getUID() && \r\n                      <rb.Nav.Link onClick={e => this.deleteSwipe(swipe, e)}>Delete</rb.Nav.Link>\r\n                    }\r\n                  </div>\r\n                  <rb.Card.Text className='col swipeText'>\r\n                    Social Preference: {swipe.ownedBy.socialPreference}\r\n                  </rb.Card.Text>\r\n                </div>\r\n              </div>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\n// import Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport { getURL, sortBySwipeTime } from '../Utils.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Swipe from '../components/Swipe.js';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class Profile extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      socialPreference: '',\r\n      passwordButtonText: 'Submit New Password',\r\n      profileButtonText: 'Submit Profile Changes',\r\n      sendVerificationEmail: 'Send Verification Email',\r\n      ownedSwipes: null,\r\n      claimedSwipes: null,\r\n    }\r\n  }\r\n\r\n  async updateProfile() {\r\n    const newName = document.getElementById('nameinput').value;\r\n    const newSocialPreference = document.getElementById('socialpreferenceinput').value;\r\n    fetch(\r\n      getURL() + '/updateUser',\r\n      {        \r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'test': LoginService.getToken()\r\n\t\t\t\t},\r\n        body: JSON.stringify({\r\n          firstName: newName,\r\n          socialPreference: newSocialPreference,\r\n        })\r\n      }\r\n    ).then(() => {\r\n      this.setState({\r\n        profileButtonText: 'Profile Change Successful!'\r\n      })\r\n    }).catch(error => {\r\n      alert('Error changing profile.');\r\n    })\r\n  }\r\n\r\n  async changePassword() {\r\n    const passwordInput = document.getElementById('newpassword');\r\n    const newPassword = passwordInput.value;\r\n    fetch(\r\n      getURL() + '/changePassword',\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'test': LoginService.getToken()\r\n\t\t\t\t},\r\n        body: JSON.stringify({\r\n          newPassword: newPassword,\r\n        })\r\n\t\t\t}\r\n    ).then(() => {\r\n      passwordInput.value = '';\r\n      this.setState({\r\n        passwordButtonText: 'Password Change Successful!'\r\n      })\r\n    }).catch(() => {\r\n      alert('Error changing password.');\r\n    });\r\n  }\r\n\r\n  async getUserOwnedSwipes() {\r\n    this.setState({\r\n      ownedSwipes: null,\r\n    });\r\n    fetch(\r\n      getURL() + '/userOwnedSwipes',\r\n\t\t\t{\r\n        method: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'test': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(\r\n      r => r.json()\r\n    ).then(data => {\r\n\t\t\tlet swipeDatas = sortBySwipeTime(Object.values(data));\r\n\t\t\tlet swipes = swipeDatas.map(\r\n\t\t\t\tswipeData => <Swipe swipe={swipeData} key={swipeData.id} />\r\n\t\t\t);\r\n\t\t\tthis.setState({\r\n\t\t\t\townedSwipes: swipes,\r\n\t\t\t});\r\n    }).catch(r => {\r\n      alert(\"Error getting user owned swipes. Status code: \" + r.status);\r\n    });\r\n  }\r\n\r\n  async getUserClaimedSwipes() {\r\n    this.setState({\r\n      claimedSwipes: null,\r\n    });\r\n    fetch(\r\n      getURL() + '/userClaimedSwipes',\r\n\t\t\t{\r\n        method: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'test': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(\r\n      r => r.json()\r\n    ).then(data => {\r\n\t\t\tlet swipeDatas = sortBySwipeTime(Object.values(data));\r\n\t\t\tlet swipes = swipeDatas.map(\r\n\t\t\t\tswipeData => <Swipe swipe={swipeData} key={swipeData.id} />\r\n\t\t\t);\r\n\t\t\tthis.setState({\r\n\t\t\t\tclaimedSwipes: swipes,\r\n\t\t\t});\r\n    }).catch(r => {\r\n      alert(\"Error getting user claimed swipes. Status code: \" + r.status);\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      getURL() + '/getUser',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'test': LoginService.getToken()\r\n        },\r\n      }\r\n    ).then(r => r.json()).then(r => {\r\n      const userData = r.userData;\r\n      this.setState({\r\n        name: userData.firstName,\r\n        email: userData.email,\r\n        socialPreference: userData.socialPreference,\r\n        emailVerified: userData.emailVerified,\r\n      });\r\n    });\r\n    this.getUserOwnedSwipes();\r\n    this.getUserClaimedSwipes();\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    \r\n    const ownedSwipes = this.state.ownedSwipes;\r\n    const claimedSwipes = this.state.claimedSwipes;\r\n\r\n    let emailVerificationText = \"Loading...\";\r\n\r\n    if (this.state.emailVerified === true) {\r\n      emailVerificationText = \"Verified\";\r\n    } else if (this.state.emailVerified === false) {\r\n      emailVerificationText = \"Unverified\";\r\n    }\r\n\r\n    if (ownedSwipes) ownedSwipes.reverse();\r\n    if (claimedSwipes) claimedSwipes.reverse();\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className=\"pagetitle\">Profile</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <div className='container'>\r\n            <h5>Account status</h5>\r\n            <div className='container'>\r\n              {emailVerificationText}\r\n              <br />\r\n              {this.state.emailVerified === false ? <rb.Button onClick={() => LoginService.sendVerificationEmail()}>{this.state.sendVerificationEmail}</rb.Button> : null }\r\n            </div>\r\n            <br/>\r\n            <h5>Info</h5>\r\n            <div className='container'>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Name:</rb.Form.Label>\r\n                <rb.Form.Control id='nameinput' type=\"text\" defaultValue={this.state.name} />\r\n              </rb.Form.Group>\r\n  \r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control type=\"email\" placeholder={this.state.email} disabled />\r\n              </rb.Form.Group>\r\n              \r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Social Preferences (e.g. \"let's eat together\", \"I prefer to eat alone\"):</rb.Form.Label>\r\n                <rb.Form.Control id='socialpreferenceinput' type=\"text\" defaultValue={this.state.socialPreference} />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.updateProfile()}>{this.state.profileButtonText}</rb.Button>\r\n            </div>\r\n            <br/>\r\n            <h5>Change Password</h5>\r\n            <div className='container'>\r\n              <rb.Form.Group>\r\n                <rb.Form.Control id='newpassword' type='password' placeholder='New Password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.changePassword()}>{this.state.passwordButtonText}</rb.Button>\r\n            </div>\r\n            <br/>\r\n            <div className='container row noPush' id='profilefooter'>\r\n\r\n              <div className='col noPush'>\r\n                <h5>Swipes you own:</h5>\r\n                <div className='container'>\r\n                  {ownedSwipes === null ? \"loading\" : (ownedSwipes.length === 0 ? \"None\" : ownedSwipes)}\r\n                </div>\r\n              </div>\r\n\r\n              <div className='col noPush'>\r\n                <h5>Swipes you've claimed:</h5>\r\n                <div className='container'>\r\n                  {claimedSwipes === null ? \"loading\" : (claimedSwipes.length === 0 ? \"None\" : claimedSwipes)}\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}","export const diningHallStrings = ['Maseeh', 'McCormick', 'Baker', 'Next', 'Simmons', 'New Vassar'];\r\n","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { getURL, sortSwipes } from '../Utils.js';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class Dashboard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tswipes: [],\r\n\t\t\tloading: false,\r\n\t\t};\r\n\t}\r\n\r\n\tgetFilteredResults(event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet form = {\r\n\t\t\t'locations': []\r\n\t\t};\r\n\t\tdiningHallStrings.forEach(key => {\r\n\t\t\tif (document.getElementById(key).checked) {\r\n\t\t\t\tform['locations'].push(key);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.getSwipes(form);\r\n\t}\r\n\r\n\tgetSwipes(form={}) {\r\n\t\tthis.setState({\r\n\t\t\tloading: true,\r\n\t\t});\r\n\t\tfetch(\r\n\t\t\tgetURL() + '/getswipes?filters=' + JSON.stringify(form),\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(data => {\r\n\t\t\tlet swipeDatas = sortSwipes(Object.values(data));\r\n\t\t\tlet swipes = swipeDatas.map(\r\n\t\t\t\tswipeData => <Swipe swipe={swipeData} key={swipeData.id} />\r\n\t\t\t);\r\n\t\t\tthis.setState({\r\n\t\t\t\tswipes: swipes,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tmakeCheckboxes(strings) {\r\n\t\tlet checks = [];\r\n\t\tstrings.forEach(s => {\r\n\t\t\tchecks.push(\r\n\t\t\t\t<rb.Form.Check type='checkbox' label={s} key={s} id={s} name={s} defaultChecked />\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn checks;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getSwipes();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!LoginService.isLoggedIn()) {\r\n\t\t\treturn LoginService.redirectLogin();\r\n\t\t}\r\n\t\tlet swipes = this.state.swipes;\r\n\t\tlet diningHallCheckboxes = this.makeCheckboxes(diningHallStrings);\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<SwipeNav />\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='pagetitle'>Swipe Dashboard</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<div className='row container' id='middashboard'>\r\n\t\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t\t<rb.Accordion>\r\n\t\t\t\t\t\t\t\t<rb.Card>\r\n\t\t\t\t\t\t\t\t\t<rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\tFilters\r\n\t\t\t\t\t\t\t\t\t\t</rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t</rb.Card.Header>\r\n\t\t\t\t\t\t\t\t\t<rb.Accordion.Collapse eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t<rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t\t<rb.Form onSubmit={(e) => this.getFilteredResults(e)} id='filterform' name='filterform'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h2>Dining Halls:</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{diningHallCheckboxes}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</rb.Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<rb.Accordion.Toggle type='submit' as={rb.Button} eventKey=\"0\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tApply Filters\r\n                        </rb.Accordion.Toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t</rb.Form>\r\n\t\t\t\t\t\t\t\t\t\t</rb.Card.Body>\r\n\t\t\t\t\t\t\t\t\t</rb.Accordion.Collapse>\r\n\t\t\t\t\t\t\t\t</rb.Card>\r\n\t\t\t\t\t\t\t</rb.Accordion>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='col' id='addswipebuttoncol'>\r\n\t\t\t\t\t\t\t<rb.Button className='btn-block' href='/#/addswipe' id='addswipebutton'>Add Swipe</rb.Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<b>Swipes happening in the next 48 hours will be shown.</b>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t{this.state.loading ? 'loading' : (swipes.length === 0 ? 'No swipes available.' : swipes)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<Footer />\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getURL } from '../Utils.js';\r\nimport Swipe from '../components/Swipe.js';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class SwipeView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      swipe: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hashes = window.location.hash.split(\"/\");\r\n    let swipeID = hashes[hashes.length - 1];\r\n\r\n    fetch(\r\n      getURL() + '/getswipe?id=' + swipeID,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(\r\n      response => response.json()\r\n    ).then(\r\n      data => {\r\n        this.setState({\r\n          swipe: data\r\n        });\r\n      }\r\n    );\r\n  }\r\n  \r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let swipe = this.state.swipe;\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <div className='col-xs-4'>\r\n            {Object.entries(swipe).length === 0 ? (\"loading\") : \r\n            (\r\n              <Swipe swipe={swipe} />\r\n            )\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className='swipeViewBuffer'></div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\nimport LoginService from '../services/LoginService';\r\nimport { diningHallStrings } from '../components/Constants.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { getURL } from '../Utils.js';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class AddSwipe extends Component {\r\n\r\n  submitForm(event) {\r\n    event.preventDefault();\r\n\r\n    let form = {};\r\n    ['swipedininghall', 'swipedate', 'swipetime', 'swipeprice'].forEach(key => {\r\n      form[key] = document.getElementById(key).value;\r\n    });\r\n    if (form['swipedate'] === \"\") {\r\n      alert(\"Please enter the date of your swipe.\");\r\n      return;\r\n    }\r\n    if (form['swipetime'] === \"\") {\r\n      alert(\"Please enter the time of your swipe.\");\r\n      return;\r\n    }\r\n    if (form['swipeprice'] === \"\") {\r\n      alert(\"Please enter the price of your swipe.\");\r\n      return;\r\n    }\r\n\r\n    document.getElementById('submitbutton').disabled = true;\r\n    let swipeTime = Date.parse(form['swipedate'] + \"T\" + form['swipetime']);\r\n\r\n    let swipe = {\r\n      active: true,\r\n      claimedBy: null,\r\n      location: form['swipedininghall'],\r\n      ownedBy: null,\r\n      swipeTime: swipeTime,\r\n      price: Number(form['swipeprice']),\r\n    }\r\n\r\n    fetch(\r\n      getURL() + '/addswipe?data=' + JSON.stringify(swipe),\r\n\t\t\t{\r\n        method: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': LoginService.getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n    ).then(response => {\r\n      if (response.status === 500) {\r\n        alert(\"Internal 500 error: couldn't add swipe.\");\r\n      } else if (response.status === 200) {\r\n        alert(\"Swipe added successfully!\");\r\n      } else {\r\n        alert(\"Unknown response status: \" + response.status);\r\n      }\r\n      document.getElementById('submitbutton').disabled = false;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!LoginService.isLoggedIn()) {\r\n      return LoginService.redirectLogin();\r\n    }\r\n    let diningHalls = diningHallStrings.map(hall => <option key={hall}>{hall}</option>);\r\n    return (\r\n      <>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Add Swipe</h1>\r\n        </div>\r\n        <div className='container'>\r\n          <rb.Card>\r\n            <rb.Card.Body>\r\n\r\n              <rb.Form onSubmit={this.submitForm} id='swipeform'>\r\n                <rb.Form.Group>\r\n                  <rb.Form.Label>Location</rb.Form.Label>\r\n                  <rb.Form.Control as='select' id='swipedininghall'>\r\n                    {diningHalls}\r\n                  </rb.Form.Control>\r\n                </rb.Form.Group>\r\n                <rb.Form.Row>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Day</rb.Form.Label>\r\n                      <rb.Form.Control type='date' id='swipedate' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Time</rb.Form.Label>\r\n                      <rb.Form.Control type='time' id='swipetime' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                  <div className='col-xs-4'>\r\n                    <rb.Form.Group>\r\n                      <rb.Form.Label>Price ($)</rb.Form.Label>\r\n                      <rb.Form.Control type='number' step='0.01' min='0' defaultValue='0' id='swipeprice' />\r\n                    </rb.Form.Group>\r\n                  </div>\r\n                </rb.Form.Row>\r\n                <rb.Button type='submit' id='submitbutton'>Submit</rb.Button>\r\n              </rb.Form>\r\n            </rb.Card.Body>\r\n          </rb.Card>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport SwipeNav from '../components/Nav.js';\r\n// import * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Footer from '../components/Footer.js';\r\n\r\nexport default class WebpageNotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SwipeNav />\r\n        <div className='container'>\r\n          <h1 className='pagetitle'>Error 404: Page not found</h1>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\n\r\nimport SwipeNav from '../components/Nav.js';\r\n\r\nimport LoginService from '../services/LoginService.js';\r\n// import { getURL } from '../Utils.js';\r\n\r\nimport * as rb from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Footer from '../components/Footer.js';\r\n\r\nclass Login extends Component {\r\n\r\n  async submitLogin() {\r\n    let email = document.getElementById('login-email').value;\r\n    let pw = document.getElementById('login-pw').value;\r\n\r\n    await LoginService.logIn(email, pw);\r\n\r\n    this.props.history.push('/dashboard');\r\n  }\r\n\r\n  async submitSignup() {\r\n    let email = document.getElementById('signup-email').value;\r\n    let pw = document.getElementById('signup-pw').value;\r\n\r\n    await LoginService.createProfile(email, pw);\r\n\r\n    this.props.history.push('/dashboard');\r\n  }\r\n\r\n  async submitResetPassword() {\r\n    let email = document.getElementById('reset-pw-email').value;\r\n    await LoginService.resetPassword(email);\r\n  }\r\n\r\n  render() {\r\n    if (LoginService.isLoggedIn()) {\r\n      return <Redirect to='/dashboard' />\r\n    }\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<SwipeNav />\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='pagetitle'>Login</h1>\r\n\t\t\t\t</div>\r\n\r\n        <div className='container'>\r\n          <h5>Log in</h5>\r\n          <div className='loginform'>\r\n            <rb.Form>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control id='login-email' placeholder=\"<kerb>@mit.edu\" type='email' />\r\n              </rb.Form.Group>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Password:</rb.Form.Label>\r\n                <rb.Form.Control id='login-pw' placeholder='Password' type='password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.submitLogin()}>Log In</rb.Button>\r\n            </rb.Form>\r\n          </div>\r\n\r\n          <br/>\r\n          \r\n          <h5>Sign Up</h5>\r\n          <div className='loginform'>\r\n            <rb.Form>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control id='signup-email' placeholder=\"<kerb>@mit.edu\" type='email' />\r\n              </rb.Form.Group>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Password (must be at least 8 characters long):</rb.Form.Label>\r\n                <rb.Form.Control id='signup-pw' placeholder='Password' type='password' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.submitSignup()}>Sign Up</rb.Button>\r\n            </rb.Form>\r\n          </div>\r\n\r\n          <br/>\r\n          \r\n          <h5>Reset Password</h5>\r\n          <div className='loginform'>\r\n            <rb.Form>\r\n              <rb.Form.Group>\r\n                <rb.Form.Label>Email:</rb.Form.Label>\r\n                <rb.Form.Control id='reset-pw-email' placeholder=\"<kerb>@mit.edu\" type='email' />\r\n              </rb.Form.Group>\r\n              <rb.Button onClick={() => this.submitResetPassword()}>Reset Password</rb.Button>\r\n            </rb.Form>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default withRouter(Login);","import React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\n\r\nimport Home from './views/Home';\r\nimport Profile from './views/Profile';\r\nimport Dashboard from './views/Dashboard';\r\nimport SwipeView from './views/SwipeView';\r\nimport AddSwipe from './views/AddSwipe';\r\nimport WebpageNotFound from './views/404.js';\r\nimport Login from './views/Login';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route exact={true} path='/' render={() => (\r\n          <Home />\r\n        )} />\r\n        <Route exact={true} path='/profile' render={() => (\r\n          <Profile />\r\n        )} />\r\n        <Route exact={true} path='/dashboard' render={() => (\r\n          <Dashboard />\r\n        )} />\r\n        <Route exact={true} path='/swipeinfo/:id' render={() => (\r\n          <SwipeView />\r\n        )} />\r\n        <Route exact={true} path='/addswipe' render={() => (\r\n          <AddSwipe />\r\n        )} />\r\n        <Route exact={true} path='/login' render={() => (\r\n          <Login />\r\n        )} />\r\n        <Route path=\"*\" exact={true} render={() => (\r\n          <WebpageNotFound />\r\n        )} />\r\n      </Switch>\r\n    </HashRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}